"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getIconSize = exports.sizeStyleMap = exports.commonSVGStyles = void 0;

var _constants = require("../constants");

var _core = require("@emotion/core");

var commonSVGStyles = {
  overflow: 'hidden',
  pointerEvents: 'none',

  /**
   * Stop-color doesn't properly apply in chrome when the inherited/current color changes.
   * We have to initially set stop-color to inherit (either via DOM attribute or an initial CSS
   * rule) and then override it with currentColor for the color changes to be picked up.
   */
  stop: {
    stopColor: 'currentColor'
  },

  /**
   * For windows high contrast mode
   */
  '@media screen and (-ms-high-contrast: white-on-black)': {
    filter: ' grayscale(100%)',
    color: '#fff',
    // N0
    fill: '#000' // DN0

  },
  '@media screen and (-ms-high-contrast: black-on-white)': {
    filter: 'grayscale(100%)',
    color: '#000',
    // DN0
    fill: '#fff' // N0

  }
};
exports.commonSVGStyles = commonSVGStyles;
var small = (0, _core.css)(_constants.dimensions.small);
var medium = (0, _core.css)(_constants.dimensions.medium);
var large = (0, _core.css)(_constants.dimensions.large);
var xlarge = (0, _core.css)(_constants.dimensions.xlarge); // pre-built css style-size map

var sizeStyleMap = {
  small: small,
  medium: medium,
  large: large,
  xlarge: xlarge
};
/**
 * Returns the width of the icon's parent span. This function has
 * special behaviour to deal with icon-file-type specifically.
 *
 * The reality is the SVG still has its own dimensions, so this is
 * a secondary fallback which in 95% of cases is not required.
 * It's only really being kept to maintain backward compatability.
 */

exports.sizeStyleMap = sizeStyleMap;

var getIconSize = function getIconSize(_ref) {
  var width = _ref.width,
      height = _ref.height,
      size = _ref.size;

  if (width && height) {
    return {
      width: width,
      height: height
    };
  }

  if (size) {
    return _constants.dimensions[size];
  }

  return undefined;
};

exports.getIconSize = getIconSize;