import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**  @jsx jsx */
import { forwardRef, memo } from 'react';
import { jsx } from '@emotion/core';
import { usePlatformLeafEventHandler } from '@atlaskit/analytics-next';
import noop from '@atlaskit/ds-lib/noop';
import useControlled from '@atlaskit/ds-lib/use-controlled';
import ChevronLeftLargeIcon from '@atlaskit/icon/glyph/chevron-left-large';
import ChevronRightLargeIcon from '@atlaskit/icon/glyph/chevron-right-large';
import Navigator from './internal/components/navigator';
import PageComponent from './internal/components/page';
import renderDefaultEllipsis from './internal/components/render-ellipsis';
import { emptyObject } from './internal/constants';
import { navStyle } from './internal/styles';
import collapseRange from './internal/utils/collapse-range';
var analyticsAttributes = {
  componentName: 'pagination',
  packageName: "@atlaskit/pagination",
  packageVersion: "14.0.2"
};

function InnerPagination(_ref, ref) {
  var _ref$components = _ref.components,
      components = _ref$components === void 0 ? emptyObject : _ref$components,
      _ref$defaultSelectedI = _ref.defaultSelectedIndex,
      defaultSelectedIndex = _ref$defaultSelectedI === void 0 ? 0 : _ref$defaultSelectedI,
      selectedIndex = _ref.selectedIndex,
      _ref$label = _ref.label,
      label = _ref$label === void 0 ? 'pagination' : _ref$label,
      _ref$previousLabel = _ref.previousLabel,
      previousLabel = _ref$previousLabel === void 0 ? 'previous' : _ref$previousLabel,
      _ref$nextLabel = _ref.nextLabel,
      nextLabel = _ref$nextLabel === void 0 ? 'next' : _ref$nextLabel,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? emptyObject : _ref$style,
      _ref$max = _ref.max,
      max = _ref$max === void 0 ? 7 : _ref$max,
      _ref$onChange = _ref.onChange,
      onChange = _ref$onChange === void 0 ? noop : _ref$onChange,
      pages = _ref.pages,
      getPageLabel = _ref.getPageLabel,
      _ref$renderEllipsis = _ref.renderEllipsis,
      renderEllipsis = _ref$renderEllipsis === void 0 ? renderDefaultEllipsis : _ref$renderEllipsis,
      analyticsContext = _ref.analyticsContext,
      testId = _ref.testId;

  var _useControlled = useControlled(selectedIndex, function () {
    return defaultSelectedIndex || 0;
  }),
      _useControlled2 = _slicedToArray(_useControlled, 2),
      selectedIndexValue = _useControlled2[0],
      setSelectedIndexValue = _useControlled2[1];

  var onChangeWithAnalytics = usePlatformLeafEventHandler(_objectSpread({
    fn: function fn(value, analyticsEvent) {
      var event = value.event,
          selectedPageIndex = value.selectedPageIndex;

      if (selectedIndex === undefined) {
        setSelectedIndexValue(selectedPageIndex);
      }

      if (onChange) {
        onChange(event, pages[selectedPageIndex], analyticsEvent);
      }
    },
    action: 'changed',
    actionSubject: 'pageNumber',
    analyticsData: analyticsContext
  }, analyticsAttributes));

  var transform = function transform(page, currPageIndex) {
    var selectedPage = pages[selectedIndexValue];
    return jsx(PageComponent, {
      key: "page-".concat(getPageLabel ? getPageLabel(page, currPageIndex) : currPageIndex),
      component: components.Page,
      onClick: function onClick(event) {
        return onChangeWithAnalytics({
          event: event,
          selectedPageIndex: currPageIndex
        });
      },
      isSelected: page === selectedPage,
      page: page
    }, getPageLabel ? getPageLabel(page, currPageIndex) : page);
  };

  return jsx("nav", {
    "data-testid": testId,
    css: _objectSpread(_objectSpread({}, navStyle), style),
    ref: ref,
    "aria-label": label
  }, jsx(Navigator, {
    key: "left-navigator",
    component: components.Previous,
    onClick: function onClick(event) {
      return onChangeWithAnalytics({
        event: event,
        selectedPageIndex: selectedIndexValue - 1
      });
    },
    isDisabled: selectedIndexValue === 0,
    iconBefore: jsx(ChevronLeftLargeIcon, {
      label: ""
    }),
    "aria-label": previousLabel,
    pages: pages
  }), collapseRange(pages, selectedIndexValue, {
    max: max,
    ellipsis: renderEllipsis,
    transform: transform
  }), jsx(Navigator, {
    key: "right-navigator",
    component: components.Next,
    onClick: function onClick(event) {
      return onChangeWithAnalytics({
        event: event,
        selectedPageIndex: selectedIndexValue + 1
      });
    },
    isDisabled: selectedIndexValue === pages.length - 1,
    iconBefore: jsx(ChevronRightLargeIcon, {
      label: ""
    }),
    "aria-label": nextLabel,
    pages: pages
  }));
}

var Pagination = /*#__PURE__*/forwardRef(InnerPagination);
export default /*#__PURE__*/memo(Pagination);