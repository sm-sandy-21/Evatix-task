/**  @jsx jsx */
import { forwardRef, memo } from 'react';
import { jsx } from '@emotion/core';
import { usePlatformLeafEventHandler } from '@atlaskit/analytics-next';
import noop from '@atlaskit/ds-lib/noop';
import useControlled from '@atlaskit/ds-lib/use-controlled';
import ChevronLeftLargeIcon from '@atlaskit/icon/glyph/chevron-left-large';
import ChevronRightLargeIcon from '@atlaskit/icon/glyph/chevron-right-large';
import Navigator from './internal/components/navigator';
import PageComponent from './internal/components/page';
import renderDefaultEllipsis from './internal/components/render-ellipsis';
import { emptyObject } from './internal/constants';
import { navStyle } from './internal/styles';
import collapseRange from './internal/utils/collapse-range';
const analyticsAttributes = {
  componentName: 'pagination',
  packageName: "@atlaskit/pagination",
  packageVersion: "14.0.2"
};

function InnerPagination({
  components = emptyObject,
  defaultSelectedIndex = 0,
  selectedIndex,
  label = 'pagination',
  previousLabel = 'previous',
  nextLabel = 'next',
  style = emptyObject,
  max = 7,
  onChange = noop,
  pages,
  getPageLabel,
  renderEllipsis = renderDefaultEllipsis,
  analyticsContext,
  testId
}, ref) {
  const [selectedIndexValue, setSelectedIndexValue] = useControlled(selectedIndex, () => defaultSelectedIndex || 0);
  const onChangeWithAnalytics = usePlatformLeafEventHandler({
    fn: (value, analyticsEvent) => {
      const {
        event,
        selectedPageIndex
      } = value;

      if (selectedIndex === undefined) {
        setSelectedIndexValue(selectedPageIndex);
      }

      if (onChange) {
        onChange(event, pages[selectedPageIndex], analyticsEvent);
      }
    },
    action: 'changed',
    actionSubject: 'pageNumber',
    analyticsData: analyticsContext,
    ...analyticsAttributes
  });

  const transform = (page, currPageIndex) => {
    const selectedPage = pages[selectedIndexValue];
    return jsx(PageComponent, {
      key: `page-${getPageLabel ? getPageLabel(page, currPageIndex) : currPageIndex}`,
      component: components.Page,
      onClick: event => onChangeWithAnalytics({
        event,
        selectedPageIndex: currPageIndex
      }),
      isSelected: page === selectedPage,
      page: page
    }, getPageLabel ? getPageLabel(page, currPageIndex) : page);
  };

  return jsx("nav", {
    "data-testid": testId,
    css: { ...navStyle,
      ...style
    },
    ref: ref,
    "aria-label": label
  }, jsx(Navigator, {
    key: "left-navigator",
    component: components.Previous,
    onClick: event => onChangeWithAnalytics({
      event,
      selectedPageIndex: selectedIndexValue - 1
    }),
    isDisabled: selectedIndexValue === 0,
    iconBefore: jsx(ChevronLeftLargeIcon, {
      label: ""
    }),
    "aria-label": previousLabel,
    pages: pages
  }), collapseRange(pages, selectedIndexValue, {
    max: max,
    ellipsis: renderEllipsis,
    transform
  }), jsx(Navigator, {
    key: "right-navigator",
    component: components.Next,
    onClick: event => onChangeWithAnalytics({
      event,
      selectedPageIndex: selectedIndexValue + 1
    }),
    isDisabled: selectedIndexValue === pages.length - 1,
    iconBefore: jsx(ChevronRightLargeIcon, {
      label: ""
    }),
    "aria-label": nextLabel,
    pages: pages
  }));
}

const Pagination = /*#__PURE__*/forwardRef(InnerPagination);
export default /*#__PURE__*/memo(Pagination);