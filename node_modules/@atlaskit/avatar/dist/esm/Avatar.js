import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _typeof from "@babel/runtime/helpers/typeof";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/** @jsx jsx */
// eslint-disable-next-line @repo/internal/fs/filename-pattern-match
import { createElement, forwardRef, useCallback, useEffect, useRef } from 'react';
import { ClassNames, jsx } from '@emotion/core';
import { useAnalyticsEvents } from '@atlaskit/analytics-next';
import { B300, N0, N70A } from '@atlaskit/theme/colors';
import AvatarImage from './AvatarImage';
import { ACTIVE_SCALE_FACTOR, AVATAR_RADIUS, AVATAR_SIZES, BORDER_WIDTH } from './constants';
import { PresenceWrapper } from './Presence';
import { StatusWrapper } from './Status';
import { getButtonProps, getCustomElement, getLinkProps } from './utilities';
var packageName = "@atlaskit/avatar";
var packageVersion = "20.3.1";

var getStyles = function getStyles(css, _ref) {
  var size = _ref.size,
      radius = _ref.radius,
      appearance = _ref.appearance,
      _ref$borderColor = _ref.borderColor,
      borderColor = _ref$borderColor === void 0 ? N0 : _ref$borderColor,
      stackIndex = _ref.stackIndex,
      isInteractive = _ref.isInteractive,
      isDisabled = _ref.isDisabled;
  return (//eslint-disable-next-line @repo/internal/react/no-css-string-literals
    css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    height: ", "px;\n    width: ", "px;\n    align-items: stretch;\n    background-color: ", ";\n    border-radius: ", ";\n    box-sizing: content-box;\n    cursor: inherit;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    outline: none;\n    overflow: hidden;\n    position: static;\n    transform: translateZ(0);\n    transition: transform 200ms, opacity 200ms;\n    box-shadow: 0 0 0 ", "px ", ";\n    border: none;\n    margin: ", "px;\n    padding: 0;\n\n    /* Added font-size and font-family styles to fix alignment issue in firefox for interactive button avatar */\n    font-size: inherit;\n    font-family: inherit;\n\n    &::-moz-focus-inner {\n      border: 0;\n      margin: 0;\n      padding: 0;\n    }\n\n    &::after {\n      background-color: transparent;\n      bottom: 0px;\n\n      /* Added border-radius style to fix hover issue in safari */\n      border-radius: ", ";\n      content: ' ';\n      left: 0px;\n      opacity: 0;\n      pointer-events: none;\n      position: absolute;\n      right: 0px;\n      top: 0px;\n      transition: opacity 200ms;\n      width: 100%;\n    }\n\n    ", "\n\n    ", "\n\n    ", "\n  "])), size, size, borderColor, appearance === 'circle' ? '50%' : "".concat(radius, "px"), BORDER_WIDTH, borderColor, BORDER_WIDTH, appearance === 'circle' ? '50%' : "".concat(radius, "px"), stackIndex && "position: relative;", isInteractive && "\n      cursor: pointer;\n\n      :focus {\n        outline: none;\n        box-shadow: 0 0 0 ".concat(BORDER_WIDTH, "px ").concat(B300, "\n      }\n\n      :active,\n      :hover {\n        &::after {\n          background-color: ").concat(N70A, ";\n          opacity: 1;\n        }\n      }\n\n      :active {\n        transform: scale(").concat(ACTIVE_SCALE_FACTOR, ");\n      }\n    "), isDisabled && "\n        cursor: not-allowed;\n\n        &::after {\n          opacity: 0.7;\n          pointer-events: none;\n          background-color: ".concat(N0, ";\n        }\n      "))
  );
};
/**
 * __Avatar__
 *
 * An avatar is a visual representation of a user or entity.
 *
 * - [Examples](https://atlassian.design/components/avatar/examples)
 * - [Code](https://atlassian.design/components/avatar/code)
 * - [Usage](https://atlassian.design/components/avatar/usage)
 */


var Avatar = /*#__PURE__*/forwardRef(function (_ref2, ref) {
  var analyticsContext = _ref2.analyticsContext,
      _ref2$appearance = _ref2.appearance,
      appearance = _ref2$appearance === void 0 ? 'circle' : _ref2$appearance,
      label = _ref2.label,
      borderColor = _ref2.borderColor,
      children = _ref2.children,
      href = _ref2.href,
      isDisabled = _ref2.isDisabled,
      name = _ref2.name,
      onClick = _ref2.onClick,
      presence = _ref2.presence,
      _ref2$size = _ref2.size,
      size = _ref2$size === void 0 ? 'medium' : _ref2$size,
      src = _ref2.src,
      stackIndex = _ref2.stackIndex,
      status = _ref2.status,
      target = _ref2.target,
      testId = _ref2.testId;

  var _useAnalyticsEvents = useAnalyticsEvents(),
      createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;

  var customPresenceNode = _typeof(presence) === 'object' ? presence : null;
  var customStatusNode = _typeof(status) === 'object' ? status : null;
  var isValidIconSize = size !== 'xxlarge' && size !== 'xsmall';
  var lastAnalytics = useRef(analyticsContext);
  useEffect(function () {
    lastAnalytics.current = analyticsContext;
  }, [analyticsContext]);
  var onClickHandler = useCallback(function (event) {
    if (isDisabled || typeof onClick !== 'function') {
      return;
    }

    var analyticsEvent = createAnalyticsEvent({
      action: 'clicked',
      actionSubject: 'avatar',
      attributes: {
        componentName: 'avatar',
        packageName: packageName,
        packageVersion: packageVersion
      }
    });
    /**
     * To avoid wrapping this component in AnalyticsContext we manually
     * push the parent context's meta data into the context.
     */

    var context = _objectSpread({
      componentName: 'avatar',
      packageName: packageName,
      packageVersion: packageVersion
    }, lastAnalytics.current);

    analyticsEvent.context.push(context);
    /**
     * Replicating the logic in the `withAnalyticsEvents` HOC
     */

    var clone = analyticsEvent.clone();

    if (clone) {
      clone.fire('atlaskit');
    }

    onClick(event, analyticsEvent);
  }, [createAnalyticsEvent, isDisabled, onClick]);

  var getTestId = function getTestId(testId, children) {
    return !children ? {
      'data-testid': "".concat(testId, "--inner")
    } : {
      testId: "".concat(testId, "--inner")
    };
  };

  var componentProps = function componentProps() {
    if (isDisabled) {
      return {
        disabled: 'true'
      };
    } // return only relevant props for either anchor or button elements


    return _objectSpread(_objectSpread({}, href && getLinkProps(href, target)), onClick && !href ? getButtonProps(onClickHandler) : {
      onClick: onClick
    });
  };

  return jsx("div", {
    "data-testid": testId,
    style: {
      display: 'inline-block',
      position: 'relative',
      outline: 0,
      zIndex: stackIndex
    }
  }, jsx(ClassNames, null, function (_ref3) {
    var css = _ref3.css;

    var props = _objectSpread(_objectSpread(_objectSpread(_objectSpread({
      className: getStyles(css, {
        size: AVATAR_SIZES[size],
        radius: AVATAR_RADIUS[size],
        appearance: appearance,
        borderColor: borderColor,
        stackIndex: stackIndex,
        isInteractive: Boolean(href || onClick),
        isDisabled: isDisabled
      })
    }, componentProps()), testId && getTestId(testId, children)), (onClick || href) && {
      'aria-label': label
    }), {}, {
      children: jsx(AvatarImage, {
        alt: name,
        appearance: appearance,
        size: size,
        src: src
      }),
      ref: ref
    });

    return children ? children(props) : /*#__PURE__*/createElement(getCustomElement(isDisabled, href, onClick), props);
  }), isValidIconSize && presence && !status && jsx(PresenceWrapper, {
    appearance: appearance,
    size: size,
    presence: !customPresenceNode && presence,
    testId: testId
  }, customPresenceNode), isValidIconSize && status && jsx(StatusWrapper, {
    appearance: appearance,
    size: size,
    borderColor: borderColor,
    status: !customStatusNode && status,
    testId: testId
  }, customStatusNode));
});
Avatar.displayName = 'Avatar';
export default Avatar;