import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

/** @jsx jsx */
// eslint-disable-next-line @repo/internal/fs/filename-pattern-match
import { useEffect, useMemo, useState } from 'react';
import { jsx } from '@emotion/core';
import PersonIcon from '@atlaskit/icon/glyph/person';
import ShipIcon from '@atlaskit/icon/glyph/ship';
import { background, N90 } from '@atlaskit/theme/colors';
import { AVATAR_RADIUS, AVATAR_SIZES } from './constants';
export var ICON_BACKGROUND = background();
export var ICON_COLOR = N90;
/**
 * __Avatar image__
 *
 * An avatar image is an internal component used to control the rendering phases of an image.
 */

var AvatarImage = function AvatarImage(_ref) {
  var _ref$alt = _ref.alt,
      alt = _ref$alt === void 0 ? '' : _ref$alt,
      src = _ref.src,
      appearance = _ref.appearance,
      size = _ref.size,
      testId = _ref.testId;

  var _useState = useState('initial'),
      _useState2 = _slicedToArray(_useState, 2),
      phase = _useState2[0],
      setPhase = _useState2[1];

  var borderRadius = appearance === 'circle' ? '50%' : "".concat(AVATAR_RADIUS[size], "px");
  var image = useMemo(function () {
    if (src) {
      setPhase('loading');
      var img = new Image();

      img.onload = function () {
        return setPhase('loaded');
      };

      img.onerror = function () {
        return setPhase('error');
      };

      img.src = src;
      return img;
    }

    return null;
  }, [src]);
  useEffect(function () {
    return function () {
      if (image) {
        image.onload = function () {};

        image.onerror = function () {};
      }
    };
  }, [image]);
  var imageHasLoadedAsync = src && phase !== 'loading' && phase !== 'error';
  var imageHasLoadedSync = src && phase === 'loading' && (image === null || image === void 0 ? void 0 : image.complete);
  var imageHasLoaded = imageHasLoadedAsync || imageHasLoadedSync;

  if (!imageHasLoaded) {
    return jsx("span", {
      css: {
        backgroundColor: ICON_COLOR,
        width: '100%',
        height: '100%',
        display: 'block',
        '& svg': {
          height: "".concat(AVATAR_SIZES[size], "px"),
          width: "".concat(AVATAR_SIZES[size], "px")
        }
      }
    }, appearance === 'circle' ? jsx(PersonIcon, {
      label: alt,
      primaryColor: background(),
      secondaryColor: ICON_COLOR,
      testId: testId && "".concat(testId, "--person")
    }) : jsx(ShipIcon, {
      label: alt,
      primaryColor: background(),
      secondaryColor: ICON_COLOR,
      testId: testId && "".concat(testId, "--ship")
    }));
  }

  return jsx("span", {
    css: {
      backgroundColor: 'transparent',
      backgroundImage: "url(".concat(src, ")"),
      backgroundPosition: 'center',
      backgroundRepeat: 'no-repeat',
      backgroundSize: 'cover',
      borderRadius: borderRadius,
      display: 'flex',
      flex: '1 1 100%',
      height: '100%',
      width: '100%'
    },
    role: "img",
    "aria-label": alt,
    "data-testid": testId && "".concat(testId, "--image")
  });
};

export default AvatarImage;