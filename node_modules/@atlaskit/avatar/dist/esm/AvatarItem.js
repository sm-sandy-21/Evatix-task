import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/** @jsx jsx */
// eslint-disable-next-line @repo/internal/fs/filename-pattern-match
import { createElement, forwardRef, Fragment } from 'react';
import { ClassNames, jsx } from '@emotion/core';
import { B200, backgroundActive, backgroundHover } from '@atlaskit/theme/colors';
import { borderRadius, gridSize } from '@atlaskit/theme/constants';
import { BORDER_WIDTH } from './constants';
import Text from './Text';
import { getButtonProps, getCustomElement, getLinkProps } from './utilities';

var getStyles = function getStyles(css, _ref) {
  var backgroundColor = _ref.backgroundColor,
      isInteractive = _ref.isInteractive,
      isDisabled = _ref.isDisabled;
  return (//eslint-disable-next-line @repo/internal/react/no-css-string-literals
    css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    align-items: center;\n    background-color: ", ";\n    border-radius: ", "px;\n    border: ", "px solid transparent;\n    box-sizing: border-box;\n    color: inherit;\n    display: flex;\n    font-size: inherit;\n    font-style: normal;\n    font-weight: normal;\n    line-height: 1;\n    outline: none;\n    margin: 0;\n    padding: ", "px;\n    text-align: left;\n    text-decoration: none;\n    width: 100%;\n\n    ", "\n\n    ", "\n  "])), backgroundColor, borderRadius(), BORDER_WIDTH, gridSize() / 2, isInteractive && "\n        :hover {\n          background-color: ".concat(backgroundHover(), ";\n          cursor: pointer;\n          text-decoration: none;\n        }\n\n        :focus {\n          outline: none;\n          border-color: ").concat(B200, ";\n        }\n\n        :active {\n          background-color: ").concat(backgroundActive(), ";\n        }\n      "), isDisabled && "\n        cursor: not-allowed;\n        opacity: 0.5;\n        pointer-events: none;\n      ")
  );
};
/**
 * __Avatar item__
 *
 * An avatar item is a wrapper that goes around an avatar when it's displayed alongside text, such as a name or status.
 *
 * - [Examples](https://atlassian.design/components/avatar/avatar-item/examples)
 * - [Code](https://atlassian.design/components/avatar/avatar-item/code)
 */


var AvatarItem = /*#__PURE__*/forwardRef(function (_ref2, ref) {
  var avatar = _ref2.avatar,
      _ref2$backgroundColor = _ref2.backgroundColor,
      backgroundColor = _ref2$backgroundColor === void 0 ? 'transparent' : _ref2$backgroundColor,
      children = _ref2.children,
      isTruncationDisabled = _ref2.isTruncationDisabled,
      href = _ref2.href,
      isDisabled = _ref2.isDisabled,
      onClick = _ref2.onClick,
      primaryText = _ref2.primaryText,
      secondaryText = _ref2.secondaryText,
      target = _ref2.target,
      testId = _ref2.testId,
      label = _ref2.label;

  var getTestId = function getTestId(testId, children) {
    return !children ? {
      'data-testid': "".concat(testId, "--itemInner")
    } : {
      testId: "".concat(testId, "--itemInner")
    };
  };

  var componentProps = function componentProps() {
    if (isDisabled) {
      return {
        disabled: 'true'
      };
    } // return only relevant props for either anchor or button elements


    return _objectSpread(_objectSpread({}, href && getLinkProps(href, target)), onClick && !href ? getButtonProps(onClick) : {
      onClick: onClick
    });
  };

  return jsx(ClassNames, null, function (_ref3) {
    var css = _ref3.css;

    var props = _objectSpread(_objectSpread(_objectSpread(_objectSpread({
      ref: ref,
      className: getStyles(css, {
        backgroundColor: backgroundColor,
        isInteractive: Boolean(onClick || href),
        isDisabled: isDisabled
      })
    }, componentProps()), testId && getTestId(testId, children)), (onClick || href) && {
      'aria-label': label
    }), {}, {
      children: jsx(Fragment, null, avatar, jsx("div", {
        css: {
          maxWidth: '100%',
          minWidth: 0,
          flex: '1 1 100%',
          lineHeight: '1.4',
          paddingLeft: "".concat(gridSize(), "px")
        }
      }, jsx(Text, {
        shouldTruncate: !isTruncationDisabled
      }, primaryText), jsx(Text, {
        isSecondary: true,
        shouldTruncate: !isTruncationDisabled
      }, secondaryText)))
    });

    return children ? children(props) : /*#__PURE__*/createElement(getCustomElement(isDisabled, href, onClick), props);
  });
});
AvatarItem.displayName = 'AvatarItem';
export default AvatarItem;