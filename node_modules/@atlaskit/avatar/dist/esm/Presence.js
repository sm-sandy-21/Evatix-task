// eslint-disable-next-line @repo/internal/fs/filename-pattern-match
import React, { Fragment } from 'react';
import { background, G300, N200, N40, purple, R300 } from '@atlaskit/theme/colors';
import { ICON_OFFSET, ICON_SIZES } from './constants';
import IconWrapper from './IconWrapper';
var BusyIndicator = /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement("circle", {
  fill: R300,
  cx: "4",
  cy: "4",
  r: "4"
}), /*#__PURE__*/React.createElement("path", {
  fill: background(),
  d: "M3.3,1.9l2.8,2.8c0.2,0.2,0.2,0.5,0,0.7L5.4,6.1c-0.2,0.2-0.5,0.2-0.7,0L1.9,3.3c-0.2-0.2-0.2-0.5,0-0.7l0.7-0.7C2.8,1.7,3.1,1.7,3.3,1.9z"
}));
var FocusIndicator = /*#__PURE__*/React.createElement("path", {
  fill: purple(),
  d: "M4,8 C1.790861,8 0,6.209139 0,4 C0,1.790861 1.790861,0 4,0 C6.209139,0 8,1.790861 8,4 C8,6.209139 6.209139,8 4,8 Z M4,6.66666667 C5.47275933,6.66666667 6.66666667,5.47275933 6.66666667,4 C6.66666667,2.52724067 5.47275933,1.33333333 4,1.33333333 C2.52724067,1.33333333 1.33333333,2.52724067 1.33333333,4 C1.33333333,5.47275933 2.52724067,6.66666667 4,6.66666667 Z M4,5.33333333 C3.26362033,5.33333333 2.66666667,4.73637967 2.66666667,4 C2.66666667,3.26362033 3.26362033,2.66666667 4,2.66666667 C4.73637967,2.66666667 5.33333333,3.26362033 5.33333333,4 C5.33333333,4.73637967 4.73637967,5.33333333 4,5.33333333 Z"
});
var OfflineIndicator = /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement("path", {
  fill: N200,
  d: "M4,8 C6.209139,8 8,6.209139 8,4 C8,1.790861 6.209139,0 4,0 C1.790861,0 0,1.790861 0,4 C0,6.209139 1.790861,8 4,8 Z M4,6 C5.1045695,6 6,5.1045695 6,4 C6,2.8954305 5.1045695,2 4,2 C2.8954305,2 2,2.8954305 2,4 C2,5.1045695 2.8954305,6 4,6 Z"
}), /*#__PURE__*/React.createElement("path", {
  fill: N40,
  d: "M4,6 C5.1045695,6 6,5.1045695 6,4 C6,2.8954305 5.1045695,2 4,2 C2.8954305,2 2,2.8954305 2,4 C2,5.1045695 2.8954305,6 4,6 Z"
}));
var OnlineIndicator = /*#__PURE__*/React.createElement("circle", {
  fill: G300,
  cx: "4",
  cy: "4",
  r: "4"
});

function getPresence(presence) {
  switch (presence) {
    case 'busy':
      return BusyIndicator;

    case 'focus':
      return FocusIndicator;

    case 'offline':
      return OfflineIndicator;

    case 'online':
      return OnlineIndicator;
  }
}
/**
 * __Avatar presence__
 *
 * A presence shows an avatarâ€™s availability.
 *
 * - [Examples](https://atlassian.design/components/avatar/avatar-presence/examples)
 * - [Code](https://atlassian.design/components/avatar/avatar-presence/code)
 * - [Usage](https://atlassian.design/components/avatar/avatar-presence/usage)
 */


var AvatarPresence = function AvatarPresence(_ref) {
  var borderColor = _ref.borderColor,
      children = _ref.children,
      presence = _ref.presence;
  return /*#__PURE__*/React.createElement(IconWrapper, {
    bgColor: borderColor
  }, presence ? /*#__PURE__*/React.createElement("svg", {
    height: "100%",
    version: "1.1",
    viewBox: "0 0 8 8",
    width: "100%",
    xmlns: "http://www.w3.org/2000/svg"
  }, getPresence(presence)) : children);
};

export default AvatarPresence;

/**
 * __Presence wrapper__
 *
 * A presence wrapper is used internally to position presence ontop of the avatar.
 */
export var PresenceWrapper = function PresenceWrapper(_ref2) {
  var size = _ref2.size,
      appearance = _ref2.appearance,
      children = _ref2.children,
      borderColor = _ref2.borderColor,
      presence = _ref2.presence,
      testId = _ref2.testId;
  var position = appearance === 'square' ? -4 : ICON_OFFSET[size];
  return /*#__PURE__*/React.createElement("span", {
    "data-testid": testId && "".concat(testId, "--presence"),
    style: {
      pointerEvents: 'none',
      position: 'absolute',
      bottom: "".concat(position, "px"),
      height: "".concat(ICON_SIZES[size], "px"),
      right: "".concat(position, "px"),
      width: "".concat(ICON_SIZES[size], "px")
    }
  }, /*#__PURE__*/React.createElement(AvatarPresence, {
    borderColor: borderColor,
    presence: !children && presence
  }, children));
};