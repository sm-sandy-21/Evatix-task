/** @jsx jsx */
// eslint-disable-next-line @repo/internal/fs/filename-pattern-match
import { createElement, forwardRef, Fragment } from 'react';
import { ClassNames, jsx } from '@emotion/core';
import { B200, backgroundActive, backgroundHover } from '@atlaskit/theme/colors';
import { borderRadius, gridSize } from '@atlaskit/theme/constants';
import { BORDER_WIDTH } from './constants';
import Text from './Text';
import { getButtonProps, getCustomElement, getLinkProps } from './utilities';

const getStyles = (css, {
  backgroundColor,
  isInteractive,
  isDisabled
}) => //eslint-disable-next-line @repo/internal/react/no-css-string-literals
css`
    align-items: center;
    background-color: ${backgroundColor};
    border-radius: ${borderRadius()}px;
    border: ${BORDER_WIDTH}px solid transparent;
    box-sizing: border-box;
    color: inherit;
    display: flex;
    font-size: inherit;
    font-style: normal;
    font-weight: normal;
    line-height: 1;
    outline: none;
    margin: 0;
    padding: ${gridSize() / 2}px;
    text-align: left;
    text-decoration: none;
    width: 100%;

    ${isInteractive && `
        :hover {
          background-color: ${backgroundHover()};
          cursor: pointer;
          text-decoration: none;
        }

        :focus {
          outline: none;
          border-color: ${B200};
        }

        :active {
          background-color: ${backgroundActive()};
        }
      `}

    ${isDisabled && `
        cursor: not-allowed;
        opacity: 0.5;
        pointer-events: none;
      `}
  `;
/**
 * __Avatar item__
 *
 * An avatar item is a wrapper that goes around an avatar when it's displayed alongside text, such as a name or status.
 *
 * - [Examples](https://atlassian.design/components/avatar/avatar-item/examples)
 * - [Code](https://atlassian.design/components/avatar/avatar-item/code)
 */


const AvatarItem = /*#__PURE__*/forwardRef(({
  avatar,
  backgroundColor = 'transparent',
  children,
  isTruncationDisabled,
  href,
  isDisabled,
  onClick,
  primaryText,
  secondaryText,
  target,
  testId,
  label
}, ref) => {
  const getTestId = (testId, children) => !children ? {
    'data-testid': `${testId}--itemInner`
  } : {
    testId: `${testId}--itemInner`
  };

  const componentProps = () => {
    if (isDisabled) {
      return {
        disabled: 'true'
      };
    } // return only relevant props for either anchor or button elements


    return { ...(href && getLinkProps(href, target)),
      ...(onClick && !href ? getButtonProps(onClick) : {
        onClick
      })
    };
  };

  return jsx(ClassNames, null, ({
    css
  }) => {
    const props = {
      ref,
      className: getStyles(css, {
        backgroundColor,
        isInteractive: Boolean(onClick || href),
        isDisabled
      }),
      ...componentProps(),
      ...(testId && getTestId(testId, children)),
      ...((onClick || href) && {
        'aria-label': label
      }),
      children: jsx(Fragment, null, avatar, jsx("div", {
        css: {
          maxWidth: '100%',
          minWidth: 0,
          flex: '1 1 100%',
          lineHeight: '1.4',
          paddingLeft: `${gridSize()}px`
        }
      }, jsx(Text, {
        shouldTruncate: !isTruncationDisabled
      }, primaryText), jsx(Text, {
        isSecondary: true,
        shouldTruncate: !isTruncationDisabled
      }, secondaryText)))
    };
    return children ? children(props) : /*#__PURE__*/createElement(getCustomElement(isDisabled, href, onClick), props);
  });
});
AvatarItem.displayName = 'AvatarItem';
export default AvatarItem;