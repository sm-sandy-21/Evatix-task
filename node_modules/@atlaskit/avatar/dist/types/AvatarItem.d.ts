/** @jsx jsx */
import { MouseEventHandler, ReactNode, Ref } from 'react';
import { AvatarClickEventHandler } from './types';
export interface CustomAvatarItemProps {
    testId?: string;
    onClick?: MouseEventHandler;
    className?: string;
    href?: string;
    children: ReactNode;
    ref: Ref<HTMLElement>;
    /**
     * This is used in render props so is okay to be defined.
     * eslint-disable-next-line consistent-props-definitions
     */
    'aria-label'?: string;
    'aria-disabled'?: boolean | 'false' | 'true' | undefined;
}
export interface AvatarItemProps {
    /**
     * Used to provide better content to screen readers when using presence/status. Rather
     * than a screen reader speaking "online, approved, John Smith", passing in an label
     * allows a custom message like "John Smith (approved and online)".
     */
    label?: string;
    /**
     * Slot to place an avatar element. Use @atlaskit/avatar.
     */
    avatar: ReactNode;
    /**
     * Change background color.
     */
    backgroundColor?: string;
    /**
     * Use a custom component instead of the default span.
     */
    children?: (props: CustomAvatarItemProps) => ReactNode;
    /**
     * URL for avatars being used as a link.
     */
    href?: string;
    /**
     * Disable the item from being interactive
     */
    isDisabled?: boolean;
    /**
     * Handler to be called on click.
     */
    onClick?: AvatarClickEventHandler;
    /**
     * PrimaryText text.
     */
    primaryText?: ReactNode;
    /**
     * SecondaryText text.
     */
    secondaryText?: ReactNode;
    /**
     * Pass target down to the anchor, if href is provided.
     */
    target?: '_blank' | '_self' | '_top' | '_parent';
    /**
     * By default, overflowing text is truncated if it exceeds the container width. Use this prop to disable this.
     */
    isTruncationDisabled?: boolean;
    /**
     * A `testId` prop is provided for specified elements, which is a unique string that appears as a data attribute `data-testid` in the rendered code, serving as a hook for automated tests
     */
    testId?: string;
}
/**
 * __Avatar item__
 *
 * An avatar item is a wrapper that goes around an avatar when it's displayed alongside text, such as a name or status.
 *
 * - [Examples](https://atlassian.design/components/avatar/avatar-item/examples)
 * - [Code](https://atlassian.design/components/avatar/avatar-item/code)
 */
declare const AvatarItem: import("react").ForwardRefExoticComponent<AvatarItemProps & import("react").RefAttributes<HTMLElement>>;
export default AvatarItem;
