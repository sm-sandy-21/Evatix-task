/** @jsx jsx */
import { MouseEventHandler, ReactNode, Ref } from 'react';
import { AppearanceType, AvatarClickEventHandler, SizeType } from './types';
export interface CustomAvatarProps {
    /**
     * This is used in render props so is okay to be defined.
     * eslint-disable-next-line consistent-props-definitions
     */
    'aria-label'?: string;
    tabIndex?: number;
    testId?: string;
    onClick?: MouseEventHandler;
    className?: string;
    href?: string;
    children: ReactNode;
    ref: Ref<HTMLElement>;
}
export interface AvatarPropTypes {
    /**
     * Indicates the shape of the avatar. Most avatars are circular, but square avatars
     * can be used for 'container' objects.
     */
    appearance?: AppearanceType;
    /**
     * Used to provide better content to screen readers when using presence/status. Rather
     * than a screen reader speaking "online, approved, John Smith", passing in an label
     * allows a custom message like "John Smith (approved and online)".
     */
    label?: string;
    /**
     * Used to override the default border color around the avatar body.
     * Accepts any color argument that the border-color CSS property accepts.
     */
    borderColor?: string;
    /**
     * Supply a custom avatar component instead of the default
     */
    children?: (props: CustomAvatarProps) => ReactNode;
    /**
     * Provides a url for avatars being used as a link.
     */
    href?: string;
    /**
     * Change the style to indicate the avatar is disabled.
     */
    isDisabled?: boolean;
    /**
     * Name will be displayed in a tooltip, also used by screen readers as fallback
     * content if the image fails to load.
     */
    name?: string;
    /**
     * Indicates a user's online status by showing a small icon on the avatar.
     * Refer to presence values on the Presence component.
     * Alternatively accepts any React element. For best results, it is recommended to
     * use square content with height and width of 100%.
     */
    presence?: ('online' | 'busy' | 'focus' | 'offline') | ReactNode;
    /**
     * Defines the size of the avatar
     */
    size?: SizeType;
    /**
     * A url to load an image from (this can also be a base64 encoded image).
     */
    src?: string;
    /**
     * Indicates contextual information by showing a small icon on the avatar.
     * Refer to status values on the Status component.
     */
    status?: ('approved' | 'declined' | 'locked') | ReactNode;
    /**
     * The index of where this avatar is in the group `stack`.
     */
    stackIndex?: number;
    /**
     * Assign specific tabIndex order to the underlying node.
     */
    tabIndex?: number;
    /**
     * Pass target down to the anchor, if href is provided.
     */
    target?: '_blank' | '_self' | '_top' | '_parent';
    /**
     * Handler to be called on click.
     */
    onClick?: AvatarClickEventHandler;
    /**
     * A `testId` prop is provided for specified elements, which is a unique string that appears as a data attribute `data-testid` in the rendered code, serving as a hook for automated tests
     */
    testId?: string;
    /**
     * Analytics context meta data
     */
    analyticsContext?: Record<string, any>;
}
/**
 * __Avatar__
 *
 * An avatar is a visual representation of a user or entity.
 *
 * - [Examples](https://atlassian.design/components/avatar/examples)
 * - [Code](https://atlassian.design/components/avatar/code)
 * - [Usage](https://atlassian.design/components/avatar/usage)
 */
declare const Avatar: import("react").ForwardRefExoticComponent<AvatarPropTypes & import("react").RefAttributes<HTMLElement>>;
export default Avatar;
