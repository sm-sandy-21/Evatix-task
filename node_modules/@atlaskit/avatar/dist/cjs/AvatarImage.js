"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ICON_COLOR = exports.ICON_BACKGROUND = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = require("react");

var _core = require("@emotion/core");

var _person = _interopRequireDefault(require("@atlaskit/icon/glyph/person"));

var _ship = _interopRequireDefault(require("@atlaskit/icon/glyph/ship"));

var _colors = require("@atlaskit/theme/colors");

var _constants = require("./constants");

/** @jsx jsx */
// eslint-disable-next-line @repo/internal/fs/filename-pattern-match
var ICON_BACKGROUND = (0, _colors.background)();
exports.ICON_BACKGROUND = ICON_BACKGROUND;
var ICON_COLOR = _colors.N90;
/**
 * __Avatar image__
 *
 * An avatar image is an internal component used to control the rendering phases of an image.
 */

exports.ICON_COLOR = ICON_COLOR;

var AvatarImage = function AvatarImage(_ref) {
  var _ref$alt = _ref.alt,
      alt = _ref$alt === void 0 ? '' : _ref$alt,
      src = _ref.src,
      appearance = _ref.appearance,
      size = _ref.size,
      testId = _ref.testId;

  var _useState = (0, _react.useState)('initial'),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      phase = _useState2[0],
      setPhase = _useState2[1];

  var borderRadius = appearance === 'circle' ? '50%' : "".concat(_constants.AVATAR_RADIUS[size], "px");
  var image = (0, _react.useMemo)(function () {
    if (src) {
      setPhase('loading');
      var img = new Image();

      img.onload = function () {
        return setPhase('loaded');
      };

      img.onerror = function () {
        return setPhase('error');
      };

      img.src = src;
      return img;
    }

    return null;
  }, [src]);
  (0, _react.useEffect)(function () {
    return function () {
      if (image) {
        image.onload = function () {};

        image.onerror = function () {};
      }
    };
  }, [image]);
  var imageHasLoadedAsync = src && phase !== 'loading' && phase !== 'error';
  var imageHasLoadedSync = src && phase === 'loading' && (image === null || image === void 0 ? void 0 : image.complete);
  var imageHasLoaded = imageHasLoadedAsync || imageHasLoadedSync;

  if (!imageHasLoaded) {
    return (0, _core.jsx)("span", {
      css: {
        backgroundColor: ICON_COLOR,
        width: '100%',
        height: '100%',
        display: 'block',
        '& svg': {
          height: "".concat(_constants.AVATAR_SIZES[size], "px"),
          width: "".concat(_constants.AVATAR_SIZES[size], "px")
        }
      }
    }, appearance === 'circle' ? (0, _core.jsx)(_person.default, {
      label: alt,
      primaryColor: (0, _colors.background)(),
      secondaryColor: ICON_COLOR,
      testId: testId && "".concat(testId, "--person")
    }) : (0, _core.jsx)(_ship.default, {
      label: alt,
      primaryColor: (0, _colors.background)(),
      secondaryColor: ICON_COLOR,
      testId: testId && "".concat(testId, "--ship")
    }));
  }

  return (0, _core.jsx)("span", {
    css: {
      backgroundColor: 'transparent',
      backgroundImage: "url(".concat(src, ")"),
      backgroundPosition: 'center',
      backgroundRepeat: 'no-repeat',
      backgroundSize: 'cover',
      borderRadius: borderRadius,
      display: 'flex',
      flex: '1 1 100%',
      height: '100%',
      width: '100%'
    },
    role: "img",
    "aria-label": alt,
    "data-testid": testId && "".concat(testId, "--image")
  });
};

var _default = AvatarImage;
exports.default = _default;