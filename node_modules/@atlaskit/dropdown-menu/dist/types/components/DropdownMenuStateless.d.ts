import React, { Component, KeyboardEvent, MouseEvent } from 'react';
import { DeprecatedItem, DeprecatedItemGroup, DropdownMenuStatelessProps, OnOpenChangeArgs } from '../types';
interface OpenCloseArgs {
    event: MouseEvent | KeyboardEvent;
    source?: 'click' | 'keydown';
}
interface State {
    autoFocusDropdownItems: boolean;
}
export declare class DropdownMenuStateless extends Component<DropdownMenuStatelessProps, State> {
    domItemsList?: NodeListOf<HTMLElement> | null;
    focusedItem?: number;
    triggerContainer?: HTMLElement;
    sourceOfIsOpen?: string | null;
    dropdownListPositioned: boolean;
    static defaultProps: {
        appearance: string;
        boundariesElement: string;
        isLoading: boolean;
        isOpen: boolean;
        items: never[];
        onItemActivated: () => void;
        onOpenChange: () => void;
        position: string;
        isMenuFixed: boolean;
        shouldAllowMultilineItems: boolean;
        shouldFitContainer: boolean;
        shouldFlip: boolean;
        triggerType: string;
        onPositioned: () => void;
    };
    state: {
        autoFocusDropdownItems: boolean;
    };
    componentDidMount: () => void;
    componentDidUpdate: (prevProp: DropdownMenuStatelessProps) => void;
    getNextFocusable: (indexItem?: number | undefined, available?: number | undefined) => number | null;
    getPrevFocusable: (indexItem?: number | undefined, available?: number | undefined) => number | null;
    focusFirstItem: () => void;
    focusNextItem: () => void;
    focusPreviousItem: () => void;
    focusItem: (index?: number | null | undefined) => void;
    isTargetChildItem: (target: HTMLElement) => boolean;
    handleKeyboardInteractionForClosed: (event: KeyboardEvent) => void;
    handleKeyboardInteractionsDeprecated: (event: KeyboardEvent<HTMLElement>) => void;
    domMenuContainer: HTMLElement | null;
    handleClickDeprecated(event: MouseEvent): void;
    isUsingDeprecatedAPI: () => boolean;
    handleClick(event: MouseEvent): void;
    handleOpenChange: (args: OnOpenChangeArgs) => void;
    triggerContent: () => {} | null | undefined;
    open: (attrs: OpenCloseArgs) => void;
    close: (attrs: OpenCloseArgs) => void;
    toggle: (attrs: OpenCloseArgs) => void;
    renderTrigger: () => {} | null | undefined;
    renderItems: (items: DeprecatedItem[]) => JSX.Element[];
    renderGroups: (groups: DeprecatedItemGroup[]) => JSX.Element[];
    renderDeprecated: () => JSX.Element;
    /** Ensure droplist is positioned before focussing to avoid container scrolling to top */
    onDroplistPositioned: () => void;
    /** Render focusManager only after droplist has been positioned when trigger via keyboard */
    renderDropdownItems: () => JSX.Element;
    render(): JSX.Element;
}
export { DropdownMenuStateless as DropdownMenuStatelessWithoutAnalytics };
declare const _default: React.ForwardRefExoticComponent<Pick<Pick<Pick<DropdownMenuStatelessProps, "children" | "appearance" | "shouldFitContainer" | "testId" | "onOpenChange" | "boundariesElement" | "isLoading" | "isOpen" | "items" | "onItemActivated" | "position" | "isMenuFixed" | "shouldAllowMultilineItems" | "shouldFlip" | "trigger" | "triggerButtonProps" | "triggerType" | "onPositioned">, "children" | "testId" | "trigger" | "triggerButtonProps"> & Partial<Pick<Pick<DropdownMenuStatelessProps, "children" | "appearance" | "shouldFitContainer" | "testId" | "onOpenChange" | "boundariesElement" | "isLoading" | "isOpen" | "items" | "onItemActivated" | "position" | "isMenuFixed" | "shouldAllowMultilineItems" | "shouldFlip" | "trigger" | "triggerButtonProps" | "triggerType" | "onPositioned">, "appearance" | "shouldFitContainer" | "onOpenChange" | "boundariesElement" | "isLoading" | "isOpen" | "items" | "onItemActivated" | "position" | "isMenuFixed" | "shouldAllowMultilineItems" | "shouldFlip" | "triggerType" | "onPositioned">> & Partial<Pick<{
    appearance: string;
    boundariesElement: string;
    isLoading: boolean;
    isOpen: boolean;
    items: never[];
    onItemActivated: () => void;
    onOpenChange: () => void;
    position: string;
    isMenuFixed: boolean;
    shouldAllowMultilineItems: boolean;
    shouldFitContainer: boolean;
    shouldFlip: boolean;
    triggerType: string;
    onPositioned: () => void;
}, never>> & React.RefAttributes<any> & import("@atlaskit/analytics-next").WithContextProps, "children" | "appearance" | "shouldFitContainer" | "testId" | "analyticsContext" | "key" | "onOpenChange" | "boundariesElement" | "isLoading" | "isOpen" | "items" | "onItemActivated" | "position" | "isMenuFixed" | "shouldAllowMultilineItems" | "shouldFlip" | "trigger" | "triggerButtonProps" | "triggerType" | "onPositioned"> & React.RefAttributes<any>>;
export default _default;
