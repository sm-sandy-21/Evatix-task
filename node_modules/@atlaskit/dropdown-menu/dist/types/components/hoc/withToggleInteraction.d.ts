import React, { ComponentType, ReactNode } from 'react';
import PropTypes from 'prop-types';
import { IconProps } from '@atlaskit/icon';
import { Behaviors } from '../../types';
export interface Props {
    /** Content to be displayed inside the item. Same as `@atlaskit/item` `children` prop. */
    children?: ReactNode;
    /** Unique identifier for the item, so that selection state can be tracked when the dropdown
     * is opened/closed. */
    id: string;
    /** Set at mount to make the item appear checked. The user may interact with the
     * item after mount. See `isSelected` if you want to control the item state manually. */
    defaultSelected?: boolean;
    /** Causes the item to appear visually checked. Can be set at mount time, and updated after
     * mount. Changing the value will not cause `onClick` to be called. */
    isSelected?: boolean;
    /** Standard optional `onClick` handler */
    onClick?: React.MouseEventHandler<HTMLElement>;
}
declare const withToggleInteraction: (WrappedComponent: ComponentType, SelectionIcon: ComponentType<IconProps>, getAriaRole: () => Behaviors) => {
    new (props: Readonly<Props>): {
        componentDidMount(): void;
        UNSAFE_componentWillReceiveProps(nextProps: Props): void;
        getIconColors: (isSelected?: boolean) => {
            primary: string;
            secondary: string;
        };
        warnIfUseControlledAndUncontrolledState: () => void;
        callContextFn: (fnToCall: string, ...args: any[]) => string | null;
        handleKeyboard: (event: React.KeyboardEvent<HTMLElement>) => void;
        handleItemActivated: (event: React.KeyboardEvent<HTMLElement> | React.MouseEvent<HTMLElement>) => void;
        isSelectedInDropdown: () => string | null;
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Props>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callBack?: (() => void) | undefined): void;
        readonly props: Readonly<Props> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<Props>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Props>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Props>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Props>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Props>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Props>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: Props, context?: any): {
        componentDidMount(): void;
        UNSAFE_componentWillReceiveProps(nextProps: Props): void;
        getIconColors: (isSelected?: boolean) => {
            primary: string;
            secondary: string;
        };
        warnIfUseControlledAndUncontrolledState: () => void;
        callContextFn: (fnToCall: string, ...args: any[]) => string | null;
        handleKeyboard: (event: React.KeyboardEvent<HTMLElement>) => void;
        handleItemActivated: (event: React.KeyboardEvent<HTMLElement> | React.MouseEvent<HTMLElement>) => void;
        isSelectedInDropdown: () => string | null;
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Props>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callBack?: (() => void) | undefined): void;
        readonly props: Readonly<Props> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<Props>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Props>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Props>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Props>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Props>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Props>, nextState: Readonly<{}>, nextContext: any): void;
    };
    displayName: string;
    defaultProps: {
        onClick: () => void;
    };
    contextTypes: {
        [x: string]: PropTypes.Validator<any>;
    };
    contextType?: React.Context<any> | undefined;
};
export default withToggleInteraction;
