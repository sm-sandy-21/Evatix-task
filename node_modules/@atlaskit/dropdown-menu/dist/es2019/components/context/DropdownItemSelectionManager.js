import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { selectionCacheContext, selectionManagerContext } from '../../util/contextNamespace';
export default class DropdownItemSelectionManager extends Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "setItemSelected", (itemId, isSelected, defaultSelected) => {
      const {
        behavior,
        groupId
      } = this.props;

      const setSelected = finalBool => {
        if (behavior === 'checkbox' || behavior === 'menuitemcheckbox') {
          this.setCheckboxItemSelected(itemId, finalBool);
        } else if (behavior === 'radio' || behavior === 'menuitemradio') {
          this.setRadioItemSelected(itemId, finalBool);
        }
      }; // If a radio or checkbox item has defaultSelected set on it, that it will try to set its
      // selected state to true each time it mounts (which happens whenever the dropdown is re-
      // opened by the user. The following check makes sure that the defaultSelected behaviour
      // only applies on the first mount of the radio/checkbox.


      if (typeof isSelected === 'boolean') {
        // If isSelected is explicitly provided, set it to that
        setSelected(isSelected);
      } else if (defaultSelected) {
        if (!this.hasAlreadyAppliedDefaultSelected(itemId)) {
          // If using defaultSelected and this is first mount, select the item
          setSelected(true);
          this.context[selectionCacheContext].markItemAsDefaultApplied(groupId, itemId);
        } else {
          // If using defaultSelected and not first mount, set isSelected to cached value
          setSelected(this.isItemSelectedInCache(itemId));
        }
      } else {
        setSelected(this.isItemSelectedInCache(itemId));
      }
    });

    _defineProperty(this, "setCheckboxItemSelected", (itemId, isSelected) => {
      const {
        [selectionCacheContext]: cache
      } = this.context;
      const alreadySelected = cache.itemsInGroup(this.props.groupId);
      const isAlreadySelected = cache.isItemSelected(this.props.groupId, itemId);

      if (isSelected && !isAlreadySelected) {
        this.updateCacheContextWithSelections([...alreadySelected, {
          id: itemId,
          groupId: this.props.groupId
        }]);
      } else if (!isSelected && isAlreadySelected) {
        const withoutCurrentItem = alreadySelected.filter(item => item.id !== itemId);
        this.updateCacheContextWithSelections(withoutCurrentItem);
      }
    });

    _defineProperty(this, "setRadioItemSelected", (itemId, isSelected) => {
      const {
        [selectionCacheContext]: cache
      } = this.context;
      const isAlreadySelected = cache.isItemSelected(this.props.groupId, itemId);

      if (isAlreadySelected && !isSelected) {
        this.updateCacheContextWithSelections([]);
      } else if (!isAlreadySelected && isSelected) {
        this.updateCacheContextWithSelections([{
          id: itemId,
          groupId: this.props.groupId
        }]);
      }
    });

    _defineProperty(this, "isItemSelectedInCache", itemId => this.context[selectionCacheContext].isItemSelected(this.props.groupId, itemId));

    _defineProperty(this, "handleItemClicked", clickedItemId => {
      const {
        behavior
      } = this.props;

      if (behavior === 'checkbox' || behavior === 'menuitemcheckbox') {
        this.handleCheckboxItemClicked(clickedItemId);
      } else if (behavior === 'radio' || behavior === 'menuitemradio') {
        this.handleRadioItemClicked(clickedItemId);
      }
    });

    _defineProperty(this, "hasAlreadyAppliedDefaultSelected", itemId => this.context[selectionCacheContext].hasItemAlreadyHadDefaultSelectedApplied(this.props.groupId, itemId));

    _defineProperty(this, "handleCheckboxItemClicked", clickedItemId => {
      const {
        [selectionCacheContext]: cache
      } = this.context;
      const itemsInGroup = cache.itemsInGroup(this.props.groupId);
      const newSelections = cache.isItemSelected(this.props.groupId, clickedItemId) ? itemsInGroup.filter(item => item.id !== clickedItemId) : [...itemsInGroup, {
        id: clickedItemId,
        groupId: this.props.groupId
      }];
      this.updateCacheContextWithSelections(newSelections);
    });

    _defineProperty(this, "handleRadioItemClicked", clickedItemId => {
      this.updateCacheContextWithSelections([{
        id: clickedItemId,
        groupId: this.props.groupId
      }]);
    });

    _defineProperty(this, "updateCacheContextWithSelections", itemSelections => {
      this.context[selectionCacheContext].itemSelectionsChanged(this.props.groupId, itemSelections);
    });
  }

  getChildContext() {
    return {
      [selectionManagerContext]: {
        isItemSelected: itemId => this.context[selectionCacheContext].isItemSelected(this.props.groupId, itemId),
        itemClicked: this.handleItemClicked,
        setItemSelected: this.setItemSelected
      }
    };
  }

  render() {
    return /*#__PURE__*/React.createElement("div", null, this.props.children);
  }

}

_defineProperty(DropdownItemSelectionManager, "childContextTypes", {
  [selectionManagerContext]: PropTypes.object
});

_defineProperty(DropdownItemSelectionManager, "contextTypes", {
  [selectionCacheContext]: PropTypes.object.isRequired
});