import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { B400, N40 } from '@atlaskit/theme/colors';
import { selectionManagerContext } from '../../util/contextNamespace';
import getDisplayName from '../../util/getDisplayName';
import { KEY_ENTER, KEY_SPACE } from '../../util/keys';
import safeContextCall from '../../util/safeContextCall';

// HOC that typically wraps @atlaskit/item
const withToggleInteraction = (WrappedComponent, SelectionIcon, getAriaRole) => {
  var _class, _temp;

  return _temp = _class = class WithToggleInteraction extends Component {
    constructor(...args) {
      super(...args);

      _defineProperty(this, "getIconColors", (isSelected = false) => {
        if (isSelected) {
          return {
            primary: B400,
            secondary: N40
          };
        }

        return {
          primary: N40,
          secondary: N40
        };
      });

      _defineProperty(this, "warnIfUseControlledAndUncontrolledState", () => {
        if (process.env.NODE_ENV !== 'production' && !process.env.CI) {
          if (this.props.defaultSelected && this.props.isSelected) {
            // eslint-disable-next-line no-console
            console.warn('DropdownItem defaultSelected and isSelected props should not be used at the same time.');
          }
        }
      });

      _defineProperty(this, "callContextFn", safeContextCall(this, selectionManagerContext));

      _defineProperty(this, "handleKeyboard", event => {
        const {
          key
        } = event;

        if (key === KEY_ENTER || key === KEY_SPACE) {
          // We prevent default here to avoid page scroll
          event.preventDefault();
          this.handleItemActivated(event);
        }
      });

      _defineProperty(this, "handleItemActivated", event => {
        if (this.props.onClick) {
          this.props.onClick(event);
        }

        this.callContextFn('itemClicked', this.props.id);
      });

      _defineProperty(this, "isSelectedInDropdown", () => this.callContextFn('isItemSelected', this.props.id));
    }

    componentDidMount() {
      const {
        defaultSelected,
        isSelected,
        id
      } = this.props;
      this.warnIfUseControlledAndUncontrolledState();
      this.callContextFn('setItemSelected', id, isSelected, defaultSelected);
    }

    UNSAFE_componentWillReceiveProps(nextProps) {
      const {
        id,
        defaultSelected,
        isSelected
      } = nextProps;

      if (this.props.isSelected !== isSelected) {
        this.callContextFn('setItemSelected', id, isSelected, defaultSelected);
      }
    }

    render() {
      const {
        children,
        ...otherProps
      } = this.props;
      const isSelected = this.isSelectedInDropdown();
      const iconColors = this.getIconColors(!!isSelected);
      const ariaRole = getAriaRole();
      const wrappedCompProps = { ...otherProps,
        role: ariaRole,
        'aria-checked': isSelected,
        isSelected: isSelected,
        onClick: this.handleItemActivated,
        onKeyDown: this.handleKeyboard,
        elemBefore: /*#__PURE__*/React.createElement(SelectionIcon, {
          primaryColor: iconColors.primary,
          secondaryColor: iconColors.secondary,
          size: "medium",
          label: ""
        })
      };
      return /*#__PURE__*/React.createElement(WrappedComponent, wrappedCompProps, children);
    }

  }, _defineProperty(_class, "displayName", `WithToggleInteraction(${getDisplayName(WrappedComponent)})`), _defineProperty(_class, "defaultProps", {
    onClick: () => {}
  }), _defineProperty(_class, "contextTypes", {
    [selectionManagerContext]: PropTypes.object.isRequired
  }), _temp;
};

export default withToggleInteraction;