import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { B400, N40 } from '@atlaskit/theme/colors';
import { selectionManagerContext } from '../../util/contextNamespace';
import getDisplayName from '../../util/getDisplayName';
import { KEY_ENTER, KEY_SPACE } from '../../util/keys';
import safeContextCall from '../../util/safeContextCall';

// HOC that typically wraps @atlaskit/item
var withToggleInteraction = function withToggleInteraction(WrappedComponent, SelectionIcon, getAriaRole) {
  var _class, _temp;

  return _temp = _class = /*#__PURE__*/function (_Component) {
    _inherits(WithToggleInteraction, _Component);

    var _super = _createSuper(WithToggleInteraction);

    function WithToggleInteraction() {
      var _this;

      _classCallCheck(this, WithToggleInteraction);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _defineProperty(_assertThisInitialized(_this), "getIconColors", function () {
        var isSelected = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        if (isSelected) {
          return {
            primary: B400,
            secondary: N40
          };
        }

        return {
          primary: N40,
          secondary: N40
        };
      });

      _defineProperty(_assertThisInitialized(_this), "warnIfUseControlledAndUncontrolledState", function () {
        if (process.env.NODE_ENV !== 'production' && !process.env.CI) {
          if (_this.props.defaultSelected && _this.props.isSelected) {
            // eslint-disable-next-line no-console
            console.warn('DropdownItem defaultSelected and isSelected props should not be used at the same time.');
          }
        }
      });

      _defineProperty(_assertThisInitialized(_this), "callContextFn", safeContextCall(_assertThisInitialized(_this), selectionManagerContext));

      _defineProperty(_assertThisInitialized(_this), "handleKeyboard", function (event) {
        var key = event.key;

        if (key === KEY_ENTER || key === KEY_SPACE) {
          // We prevent default here to avoid page scroll
          event.preventDefault();

          _this.handleItemActivated(event);
        }
      });

      _defineProperty(_assertThisInitialized(_this), "handleItemActivated", function (event) {
        if (_this.props.onClick) {
          _this.props.onClick(event);
        }

        _this.callContextFn('itemClicked', _this.props.id);
      });

      _defineProperty(_assertThisInitialized(_this), "isSelectedInDropdown", function () {
        return _this.callContextFn('isItemSelected', _this.props.id);
      });

      return _this;
    }

    _createClass(WithToggleInteraction, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this$props = this.props,
            defaultSelected = _this$props.defaultSelected,
            isSelected = _this$props.isSelected,
            id = _this$props.id;
        this.warnIfUseControlledAndUncontrolledState();
        this.callContextFn('setItemSelected', id, isSelected, defaultSelected);
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        var id = nextProps.id,
            defaultSelected = nextProps.defaultSelected,
            isSelected = nextProps.isSelected;

        if (this.props.isSelected !== isSelected) {
          this.callContextFn('setItemSelected', id, isSelected, defaultSelected);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props2 = this.props,
            children = _this$props2.children,
            otherProps = _objectWithoutProperties(_this$props2, ["children"]);

        var isSelected = this.isSelectedInDropdown();
        var iconColors = this.getIconColors(!!isSelected);
        var ariaRole = getAriaRole();

        var wrappedCompProps = _objectSpread(_objectSpread({}, otherProps), {}, {
          role: ariaRole,
          'aria-checked': isSelected,
          isSelected: isSelected,
          onClick: this.handleItemActivated,
          onKeyDown: this.handleKeyboard,
          elemBefore: /*#__PURE__*/React.createElement(SelectionIcon, {
            primaryColor: iconColors.primary,
            secondaryColor: iconColors.secondary,
            size: "medium",
            label: ""
          })
        });

        return /*#__PURE__*/React.createElement(WrappedComponent, wrappedCompProps, children);
      }
    }]);

    return WithToggleInteraction;
  }(Component), _defineProperty(_class, "displayName", "WithToggleInteraction(".concat(getDisplayName(WrappedComponent), ")")), _defineProperty(_class, "defaultProps", {
    onClick: function onClick() {}
  }), _defineProperty(_class, "contextTypes", _defineProperty({}, selectionManagerContext, PropTypes.object.isRequired)), _temp;
};

export default withToggleInteraction;