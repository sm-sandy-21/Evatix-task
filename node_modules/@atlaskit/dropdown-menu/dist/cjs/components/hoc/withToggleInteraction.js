"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty3 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _colors = require("@atlaskit/theme/colors");

var _contextNamespace = require("../../util/contextNamespace");

var _getDisplayName = _interopRequireDefault(require("../../util/getDisplayName"));

var _keys = require("../../util/keys");

var _safeContextCall = _interopRequireDefault(require("../../util/safeContextCall"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty3.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

// HOC that typically wraps @atlaskit/item
var withToggleInteraction = function withToggleInteraction(WrappedComponent, SelectionIcon, getAriaRole) {
  var _class, _temp;

  return _temp = _class = /*#__PURE__*/function (_Component) {
    (0, _inherits2.default)(WithToggleInteraction, _Component);

    var _super = _createSuper(WithToggleInteraction);

    function WithToggleInteraction() {
      var _this;

      (0, _classCallCheck2.default)(this, WithToggleInteraction);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      (0, _defineProperty3.default)((0, _assertThisInitialized2.default)(_this), "getIconColors", function () {
        var isSelected = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        if (isSelected) {
          return {
            primary: _colors.B400,
            secondary: _colors.N40
          };
        }

        return {
          primary: _colors.N40,
          secondary: _colors.N40
        };
      });
      (0, _defineProperty3.default)((0, _assertThisInitialized2.default)(_this), "warnIfUseControlledAndUncontrolledState", function () {
        if (process.env.NODE_ENV !== 'production' && !process.env.CI) {
          if (_this.props.defaultSelected && _this.props.isSelected) {
            // eslint-disable-next-line no-console
            console.warn('DropdownItem defaultSelected and isSelected props should not be used at the same time.');
          }
        }
      });
      (0, _defineProperty3.default)((0, _assertThisInitialized2.default)(_this), "callContextFn", (0, _safeContextCall.default)((0, _assertThisInitialized2.default)(_this), _contextNamespace.selectionManagerContext));
      (0, _defineProperty3.default)((0, _assertThisInitialized2.default)(_this), "handleKeyboard", function (event) {
        var key = event.key;

        if (key === _keys.KEY_ENTER || key === _keys.KEY_SPACE) {
          // We prevent default here to avoid page scroll
          event.preventDefault();

          _this.handleItemActivated(event);
        }
      });
      (0, _defineProperty3.default)((0, _assertThisInitialized2.default)(_this), "handleItemActivated", function (event) {
        if (_this.props.onClick) {
          _this.props.onClick(event);
        }

        _this.callContextFn('itemClicked', _this.props.id);
      });
      (0, _defineProperty3.default)((0, _assertThisInitialized2.default)(_this), "isSelectedInDropdown", function () {
        return _this.callContextFn('isItemSelected', _this.props.id);
      });
      return _this;
    }

    (0, _createClass2.default)(WithToggleInteraction, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this$props = this.props,
            defaultSelected = _this$props.defaultSelected,
            isSelected = _this$props.isSelected,
            id = _this$props.id;
        this.warnIfUseControlledAndUncontrolledState();
        this.callContextFn('setItemSelected', id, isSelected, defaultSelected);
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        var id = nextProps.id,
            defaultSelected = nextProps.defaultSelected,
            isSelected = nextProps.isSelected;

        if (this.props.isSelected !== isSelected) {
          this.callContextFn('setItemSelected', id, isSelected, defaultSelected);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props2 = this.props,
            children = _this$props2.children,
            otherProps = (0, _objectWithoutProperties2.default)(_this$props2, ["children"]);
        var isSelected = this.isSelectedInDropdown();
        var iconColors = this.getIconColors(!!isSelected);
        var ariaRole = getAriaRole();

        var wrappedCompProps = _objectSpread(_objectSpread({}, otherProps), {}, {
          role: ariaRole,
          'aria-checked': isSelected,
          isSelected: isSelected,
          onClick: this.handleItemActivated,
          onKeyDown: this.handleKeyboard,
          elemBefore: /*#__PURE__*/_react.default.createElement(SelectionIcon, {
            primaryColor: iconColors.primary,
            secondaryColor: iconColors.secondary,
            size: "medium",
            label: ""
          })
        });

        return /*#__PURE__*/_react.default.createElement(WrappedComponent, wrappedCompProps, children);
      }
    }]);
    return WithToggleInteraction;
  }(_react.Component), (0, _defineProperty3.default)(_class, "displayName", "WithToggleInteraction(".concat((0, _getDisplayName.default)(WrappedComponent), ")")), (0, _defineProperty3.default)(_class, "defaultProps", {
    onClick: function onClick() {}
  }), (0, _defineProperty3.default)(_class, "contextTypes", (0, _defineProperty3.default)({}, _contextNamespace.selectionManagerContext, _propTypes.default.object.isRequired)), _temp;
};

var _default = withToggleInteraction;
exports.default = _default;