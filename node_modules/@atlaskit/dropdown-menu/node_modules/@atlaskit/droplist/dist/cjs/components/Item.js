"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DroplistItemWithoutAnalytics = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _analyticsNext = require("@atlaskit/analytics-next");

var _checkbox = _interopRequireDefault(require("@atlaskit/icon/glyph/checkbox"));

var _radio = _interopRequireDefault(require("@atlaskit/icon/glyph/radio"));

var _tooltip = _interopRequireDefault(require("@atlaskit/tooltip"));

var _Item = require("../styled/Item");

var _utils = require("../utils");

var _Element = _interopRequireDefault(require("./Element"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var packageName = "@atlaskit/droplist";
var packageVersion = "11.0.7";
var inputTypes = {
  checkbox: _checkbox.default,
  radio: _radio.default
};

var Item = /*#__PURE__*/function (_PureComponent) {
  (0, _inherits2.default)(Item, _PureComponent);

  var _super = _createSuper(Item);

  function Item() {
    var _this;

    (0, _classCallCheck2.default)(this, Item);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {
      isHovered: false,
      isPressed: false
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "componentDidMount", function () {
      return document.addEventListener('mouseup', _this.handleMouseUp);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "componentWillUnmount", function () {
      return document.removeEventListener('mouseup', _this.handleMouseUp);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "guardedActivate", function (event) {
      var _this$props = _this.props,
          isDisabled = _this$props.isDisabled,
          onActivate = _this$props.onActivate;
      if (!isDisabled && onActivate) onActivate({
        item: (0, _assertThisInitialized2.default)(_this),
        event: event
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleClick", function (event) {
      return _this.guardedActivate(event);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleKeyPress", function (event) {
      var keyIsValid = ['Enter', ' '].indexOf(event.key) > -1;
      if (keyIsValid) _this.guardedActivate(event);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleMouseDown", function () {
      return _this.setState({
        isPressed: true
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleMouseUp", function () {
      return _this.setState({
        isPressed: false
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleMouseOut", function () {
      return _this.setState({
        isHovered: false
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleMouseOver", function () {
      return _this.setState({
        isHovered: true
      });
    });
    return _this;
  }

  (0, _createClass2.default)(Item, [{
    key: "render",
    value: function render() {
      var props = this.props;
      var _this$state = this.state,
          isHovered = _this$state.isHovered,
          isPressed = _this$state.isPressed;
      var type = props.type || '';
      var hasInput = ['checkbox', 'radio'].indexOf(type) > -1;
      var Input = inputTypes[type];
      var appearanceProps = {
        isActive: props.type === 'link' && props.isActive || props.type === 'option' && props.isSelected,
        isChecked: ['checkbox', 'radio'].indexOf(type) > -1 && props.isChecked,
        isDisabled: props.isDisabled,
        isFocused: props.isFocused,
        isHidden: props.isHidden,
        isHovered: isHovered,
        isPressed: isPressed,
        isSelected: type === 'option' && props.isSelected,
        isPrimary: props.appearance === 'primary'
      };

      var element = /*#__PURE__*/_react.default.createElement(_Element.default, (0, _extends2.default)({}, appearanceProps, {
        handleClick: this.handleClick,
        handleKeyPress: this.handleKeyPress,
        handleMouseOut: this.handleMouseOut,
        handleMouseOver: this.handleMouseOver,
        handleMouseUp: this.handleMouseUp,
        handleMouseDown: this.handleMouseDown,
        href: props.href,
        target: props.target,
        title: props.title,
        type: props.type
      }), hasInput && /*#__PURE__*/_react.default.createElement(_Item.InputWrapper, appearanceProps, /*#__PURE__*/_react.default.createElement(Input, {
        label: "",
        primaryColor: (0, _utils.getInputBackground)(appearanceProps),
        secondaryColor: (0, _utils.getInputFill)(appearanceProps),
        size: "medium"
      })), !!props.elemBefore && /*#__PURE__*/_react.default.createElement(_Item.Before, null, props.elemBefore), /*#__PURE__*/_react.default.createElement(_Item.ContentWrapper, null, /*#__PURE__*/_react.default.createElement(_Item.Content, {
        allowMultiline: this.context.shouldAllowMultilineItems
      }, props.children), !!props.description && /*#__PURE__*/_react.default.createElement(_Item.Description, null, props.description)), !!props.elemAfter && /*#__PURE__*/_react.default.createElement(_Item.After, null, props.elemAfter));

      return /*#__PURE__*/_react.default.createElement("span", {
        role: "presentation"
      }, props.tooltipDescription ? /*#__PURE__*/_react.default.createElement(_tooltip.default, {
        content: props.tooltipDescription,
        position: props.tooltipPosition
      }, element) : element);
    }
  }]);
  return Item;
}(_react.PureComponent);

exports.DroplistItemWithoutAnalytics = Item;
(0, _defineProperty2.default)(Item, "defaultProps", {
  appearance: 'default',
  children: null,
  description: '',
  elemAfter: null,
  elemBefore: null,
  href: null,
  isActive: false,
  isChecked: false,
  isDisabled: false,
  isFocused: false,
  isHidden: false,
  isSelected: false,
  itemContext: 'menu',
  onActivate: function onActivate() {},
  target: null,
  title: null,
  tooltipDescription: null,
  tooltipPosition: 'right',
  type: 'link'
});
(0, _defineProperty2.default)(Item, "contextTypes", {
  shouldAllowMultilineItems: _propTypes.default.bool
});
var createAndFireEventOnAtlaskit = (0, _analyticsNext.createAndFireEvent)('atlaskit');

var _default = (0, _analyticsNext.withAnalyticsContext)({
  componentName: 'droplistItem',
  packageName: packageName,
  packageVersion: packageVersion
})((0, _analyticsNext.withAnalyticsEvents)({
  onActivate: createAndFireEventOnAtlaskit({
    action: 'selected',
    actionSubject: 'droplistItem',
    attributes: {
      componentName: 'droplistItem',
      packageName: packageName,
      packageVersion: packageVersion
    }
  })
})(Item));

exports.default = _default;