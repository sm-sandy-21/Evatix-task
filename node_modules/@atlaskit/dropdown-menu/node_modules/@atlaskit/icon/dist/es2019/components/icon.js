import _extends from "@babel/runtime/helpers/extends";

/** @jsx jsx */
import { memo } from 'react';
import { css, jsx } from '@emotion/core';
import { useGlobalTheme } from '@atlaskit/theme/components';
import { getBackground } from './utils';
import { commonSVGStyles, getIconSize } from './styles';
/**
 * We are hiding these props from consumers as they're used to
 * hack around icon sizing specifically for icon-file-type.
 */

const iconStyles = css({
  display: 'inline-block',
  flexShrink: 0,
  lineHeight: 1,
  '> svg': { ...commonSVGStyles,
    maxWidth: '100%',
    maxHeight: '100%',
    color: 'var(--icon-primary-color)',
    fill: 'var(--icon-secondary-color)',
    verticalAlign: 'bottom'
  }
});
/**
 * __Icon__
 *
 * An icon is used as a visual representation of common actions and commands to provide context.
 *
 * - [Examples](https://atlaskit.atlassian.com/packages/design-system/icon)
 * - [Code](https://atlaskit.atlassian.com/packages/design-system/icon/docs/custom-icons)
 */

export const Icon = /*#__PURE__*/memo(function Icon(props) {
  const {
    glyph: Glyph,
    dangerouslySetGlyph,
    primaryColor = 'currentColor',
    secondaryColor,
    size,
    testId,
    label,
    width,
    height
  } = props;
  const glyphProps = dangerouslySetGlyph ? {
    dangerouslySetInnerHTML: {
      __html: dangerouslySetGlyph
    }
  } : {
    children: Glyph ? jsx(Glyph, {
      role: "presentation"
    }) : null
  };
  const dimensions = getIconSize({
    width,
    height,
    size
  });
  const {
    mode
  } = useGlobalTheme();
  return jsx("span", _extends({
    "data-testid": testId,
    role: label ? 'img' : 'presentation',
    "aria-label": label ? label : undefined,
    "aria-hidden": label ? undefined : true,
    style: {
      '--icon-primary-color': primaryColor,
      '--icon-secondary-color': secondaryColor || getBackground(mode)
    }
  }, glyphProps, {
    css: [iconStyles, // NB: This can be resolved if this component, composes base SVG / and/or skeleton
    // We could then simplify how common styles are dealt with simply by encapsualting them
    // at their appropriate level and/or having a singular approach to css variables in the package
    dimensions && // eslint-disable-next-line @repo/internal/react/consistent-css-prop-usage
    css({
      width: dimensions.width,
      height: dimensions.height,
      '> svg': dimensions
    })]
  }));
});
export default Icon;