{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\n\nvar _templateObject;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/** @jsx jsx */\n// eslint-disable-next-line @repo/internal/fs/filename-pattern-match\n\n\nimport { createElement, forwardRef, Fragment } from 'react';\nimport { ClassNames, jsx } from '@emotion/core';\nimport { B200, backgroundActive, backgroundHover } from '@atlaskit/theme/colors';\nimport { borderRadius, gridSize } from '@atlaskit/theme/constants';\nimport { BORDER_WIDTH } from './constants';\nimport Text from './Text';\nimport { getButtonProps, getCustomElement, getLinkProps } from './utilities';\n\nvar getStyles = function getStyles(css, _ref) {\n  var backgroundColor = _ref.backgroundColor,\n      isInteractive = _ref.isInteractive,\n      isDisabled = _ref.isDisabled;\n  return (//eslint-disable-next-line @repo/internal/react/no-css-string-literals\n    css(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n    align-items: center;\\n    background-color: \", \";\\n    border-radius: \", \"px;\\n    border: \", \"px solid transparent;\\n    box-sizing: border-box;\\n    color: inherit;\\n    display: flex;\\n    font-size: inherit;\\n    font-style: normal;\\n    font-weight: normal;\\n    line-height: 1;\\n    outline: none;\\n    margin: 0;\\n    padding: \", \"px;\\n    text-align: left;\\n    text-decoration: none;\\n    width: 100%;\\n\\n    \", \"\\n\\n    \", \"\\n  \"])), backgroundColor, borderRadius(), BORDER_WIDTH, gridSize() / 2, isInteractive && \"\\n        :hover {\\n          background-color: \".concat(backgroundHover(), \";\\n          cursor: pointer;\\n          text-decoration: none;\\n        }\\n\\n        :focus {\\n          outline: none;\\n          border-color: \").concat(B200, \";\\n        }\\n\\n        :active {\\n          background-color: \").concat(backgroundActive(), \";\\n        }\\n      \"), isDisabled && \"\\n        cursor: not-allowed;\\n        opacity: 0.5;\\n        pointer-events: none;\\n      \")\n  );\n};\n/**\n * __Avatar item__\n *\n * An avatar item is a wrapper that goes around an avatar when it's displayed alongside text, such as a name or status.\n *\n * - [Examples](https://atlassian.design/components/avatar/avatar-item/examples)\n * - [Code](https://atlassian.design/components/avatar/avatar-item/code)\n */\n\n\nvar AvatarItem = /*#__PURE__*/forwardRef(function (_ref2, ref) {\n  var avatar = _ref2.avatar,\n      _ref2$backgroundColor = _ref2.backgroundColor,\n      backgroundColor = _ref2$backgroundColor === void 0 ? 'transparent' : _ref2$backgroundColor,\n      children = _ref2.children,\n      isTruncationDisabled = _ref2.isTruncationDisabled,\n      href = _ref2.href,\n      isDisabled = _ref2.isDisabled,\n      onClick = _ref2.onClick,\n      primaryText = _ref2.primaryText,\n      secondaryText = _ref2.secondaryText,\n      target = _ref2.target,\n      testId = _ref2.testId,\n      label = _ref2.label;\n\n  var getTestId = function getTestId(testId, children) {\n    return !children ? {\n      'data-testid': \"\".concat(testId, \"--itemInner\")\n    } : {\n      testId: \"\".concat(testId, \"--itemInner\")\n    };\n  };\n\n  var componentProps = function componentProps() {\n    if (isDisabled) {\n      return {\n        disabled: 'true'\n      };\n    } // return only relevant props for either anchor or button elements\n\n\n    return _objectSpread(_objectSpread({}, href && getLinkProps(href, target)), onClick && !href ? getButtonProps(onClick) : {\n      onClick: onClick\n    });\n  };\n\n  return jsx(ClassNames, null, function (_ref3) {\n    var css = _ref3.css;\n\n    var props = _objectSpread(_objectSpread(_objectSpread(_objectSpread({\n      ref: ref,\n      className: getStyles(css, {\n        backgroundColor: backgroundColor,\n        isInteractive: Boolean(onClick || href),\n        isDisabled: isDisabled\n      })\n    }, componentProps()), testId && getTestId(testId, children)), (onClick || href) && {\n      'aria-label': label\n    }), {}, {\n      children: jsx(Fragment, null, avatar, jsx(\"div\", {\n        css: {\n          maxWidth: '100%',\n          minWidth: 0,\n          flex: '1 1 100%',\n          lineHeight: '1.4',\n          paddingLeft: \"\".concat(gridSize(), \"px\")\n        }\n      }, jsx(Text, {\n        shouldTruncate: !isTruncationDisabled\n      }, primaryText), jsx(Text, {\n        isSecondary: true,\n        shouldTruncate: !isTruncationDisabled\n      }, secondaryText)))\n    });\n\n    return children ? children(props) : /*#__PURE__*/createElement(getCustomElement(isDisabled, href, onClick), props);\n  });\n});\nAvatarItem.displayName = 'AvatarItem';\nexport default AvatarItem;","map":{"version":3,"sources":["/home/sandy/Documents/evatix/create-components/node_modules/@atlaskit/avatar/dist/esm/AvatarItem.js"],"names":["_defineProperty","_taggedTemplateLiteral","_templateObject","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","createElement","forwardRef","Fragment","ClassNames","jsx","B200","backgroundActive","backgroundHover","borderRadius","gridSize","BORDER_WIDTH","Text","getButtonProps","getCustomElement","getLinkProps","getStyles","css","_ref","backgroundColor","isInteractive","isDisabled","concat","AvatarItem","_ref2","ref","avatar","_ref2$backgroundColor","children","isTruncationDisabled","href","onClick","primaryText","secondaryText","testId","label","getTestId","componentProps","disabled","_ref3","props","className","Boolean","maxWidth","minWidth","flex","lineHeight","paddingLeft","shouldTruncate","isSecondary","displayName"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\n\nvar _templateObject;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/** @jsx jsx */\n// eslint-disable-next-line @repo/internal/fs/filename-pattern-match\nimport { createElement, forwardRef, Fragment } from 'react';\nimport { ClassNames, jsx } from '@emotion/core';\nimport { B200, backgroundActive, backgroundHover } from '@atlaskit/theme/colors';\nimport { borderRadius, gridSize } from '@atlaskit/theme/constants';\nimport { BORDER_WIDTH } from './constants';\nimport Text from './Text';\nimport { getButtonProps, getCustomElement, getLinkProps } from './utilities';\n\nvar getStyles = function getStyles(css, _ref) {\n  var backgroundColor = _ref.backgroundColor,\n      isInteractive = _ref.isInteractive,\n      isDisabled = _ref.isDisabled;\n  return (//eslint-disable-next-line @repo/internal/react/no-css-string-literals\n    css(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n    align-items: center;\\n    background-color: \", \";\\n    border-radius: \", \"px;\\n    border: \", \"px solid transparent;\\n    box-sizing: border-box;\\n    color: inherit;\\n    display: flex;\\n    font-size: inherit;\\n    font-style: normal;\\n    font-weight: normal;\\n    line-height: 1;\\n    outline: none;\\n    margin: 0;\\n    padding: \", \"px;\\n    text-align: left;\\n    text-decoration: none;\\n    width: 100%;\\n\\n    \", \"\\n\\n    \", \"\\n  \"])), backgroundColor, borderRadius(), BORDER_WIDTH, gridSize() / 2, isInteractive && \"\\n        :hover {\\n          background-color: \".concat(backgroundHover(), \";\\n          cursor: pointer;\\n          text-decoration: none;\\n        }\\n\\n        :focus {\\n          outline: none;\\n          border-color: \").concat(B200, \";\\n        }\\n\\n        :active {\\n          background-color: \").concat(backgroundActive(), \";\\n        }\\n      \"), isDisabled && \"\\n        cursor: not-allowed;\\n        opacity: 0.5;\\n        pointer-events: none;\\n      \")\n  );\n};\n/**\n * __Avatar item__\n *\n * An avatar item is a wrapper that goes around an avatar when it's displayed alongside text, such as a name or status.\n *\n * - [Examples](https://atlassian.design/components/avatar/avatar-item/examples)\n * - [Code](https://atlassian.design/components/avatar/avatar-item/code)\n */\n\n\nvar AvatarItem = /*#__PURE__*/forwardRef(function (_ref2, ref) {\n  var avatar = _ref2.avatar,\n      _ref2$backgroundColor = _ref2.backgroundColor,\n      backgroundColor = _ref2$backgroundColor === void 0 ? 'transparent' : _ref2$backgroundColor,\n      children = _ref2.children,\n      isTruncationDisabled = _ref2.isTruncationDisabled,\n      href = _ref2.href,\n      isDisabled = _ref2.isDisabled,\n      onClick = _ref2.onClick,\n      primaryText = _ref2.primaryText,\n      secondaryText = _ref2.secondaryText,\n      target = _ref2.target,\n      testId = _ref2.testId,\n      label = _ref2.label;\n\n  var getTestId = function getTestId(testId, children) {\n    return !children ? {\n      'data-testid': \"\".concat(testId, \"--itemInner\")\n    } : {\n      testId: \"\".concat(testId, \"--itemInner\")\n    };\n  };\n\n  var componentProps = function componentProps() {\n    if (isDisabled) {\n      return {\n        disabled: 'true'\n      };\n    } // return only relevant props for either anchor or button elements\n\n\n    return _objectSpread(_objectSpread({}, href && getLinkProps(href, target)), onClick && !href ? getButtonProps(onClick) : {\n      onClick: onClick\n    });\n  };\n\n  return jsx(ClassNames, null, function (_ref3) {\n    var css = _ref3.css;\n\n    var props = _objectSpread(_objectSpread(_objectSpread(_objectSpread({\n      ref: ref,\n      className: getStyles(css, {\n        backgroundColor: backgroundColor,\n        isInteractive: Boolean(onClick || href),\n        isDisabled: isDisabled\n      })\n    }, componentProps()), testId && getTestId(testId, children)), (onClick || href) && {\n      'aria-label': label\n    }), {}, {\n      children: jsx(Fragment, null, avatar, jsx(\"div\", {\n        css: {\n          maxWidth: '100%',\n          minWidth: 0,\n          flex: '1 1 100%',\n          lineHeight: '1.4',\n          paddingLeft: \"\".concat(gridSize(), \"px\")\n        }\n      }, jsx(Text, {\n        shouldTruncate: !isTruncationDisabled\n      }, primaryText), jsx(Text, {\n        isSecondary: true,\n        shouldTruncate: !isTruncationDisabled\n      }, secondaryText)))\n    });\n\n    return children ? children(props) : /*#__PURE__*/createElement(getCustomElement(isDisabled, href, onClick), props);\n  });\n});\nAvatarItem.displayName = 'AvatarItem';\nexport default AvatarItem;"]},"metadata":{},"sourceType":"module"}