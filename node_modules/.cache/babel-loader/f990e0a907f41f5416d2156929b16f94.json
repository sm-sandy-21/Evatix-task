{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React, { createContext, useContext, useCallback } from 'react';\n/**\n * createTheme is used to create a set of Providers and Consumers for theming components.\n * - Takes a default theme function; this theme function gets a set of props, and returns tokens\n *  based on those props. An example of this default theme function is one that produces the standard\n *  appearance of the component\n * - Returns three things - a Provider that allow for additional themes to be applied, a Consumer\n *  that can get the current theme and fetch it, and a custom hook - useTheme which provides an alternate (although functionally the same) API\n *  to the Consumer.\n **/\n\nexport function createTheme(defaultGetTokens) {\n  var emptyThemeFn = function emptyThemeFn(getTokens, props) {\n    return getTokens(props);\n  };\n  /**\n   * Internally, Theme uses React Context, with internal providers and consumers.\n   * The React Context passes only a function that gets props, and turns them into tokens. This\n   * function gets mixed as more Providers with their own themes are added. This mixed function\n   * is ultimately picked up by Consumers, which implement a context consumer internally to fetch\n   * the theme.\n   **/\n\n\n  var ThemeContext = /*#__PURE__*/createContext(defaultGetTokens);\n\n  function useTheme(themeProps) {\n    var theme = useContext(ThemeContext);\n    var themeFn = theme || emptyThemeFn;\n    var tokens = themeFn(themeProps);\n    return tokens;\n  } // The Theme Consumer takes a function as its child - this function takes tokens, and the\n  // return value is generally a set of nodes with the tokens applied appropriately.\n\n\n  function Consumer(props) {\n    var children = props.children,\n        themeProps = _objectWithoutProperties(props, [\"children\"]); // @ts-ignore See issue for more info: https://github.com/Microsoft/TypeScript/issues/10727\n    // Argument of type 'Pick<ThemeProps & { children: (tokens: ThemeTokens) => ReactNode; }, Exclude<keyof ThemeProps, \"children\">>' is not assignable to parameter of type 'ThemeProps'.ts(2345)\n\n\n    var tokens = useTheme(themeProps); // We add a fragment to ensure we don't break people upgrading.\n    // Previously they may have been able to pass in undefined without things blowing up.\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, children(tokens));\n  }\n  /**\n   * The Theme Provider takes regular nodes as its children, but also takes a *theme function*\n   * - The theme function takes a set of props, as well as a function (getTokens) that can turn props into tokens.\n   * - The getTokens function isn't called immediately - instead the props are passed\n   *    through a mix of parent theming functions\n   * Children of this provider will receive this mixed theme\n   */\n\n\n  function Provider(props) {\n    var themeFn = useContext(ThemeContext);\n    var valueFn = props.value || emptyThemeFn;\n    var mixedFn = useCallback(function (themeProps) {\n      return valueFn(themeFn, themeProps);\n    }, [themeFn, valueFn]);\n    return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n      value: mixedFn\n    }, props.children);\n  }\n\n  return {\n    Consumer: Consumer,\n    Provider: Provider,\n    useTheme: useTheme\n  };\n}","map":{"version":3,"sources":["/home/sandy/Documents/evatix/create-components/node_modules/@atlaskit/avatar/node_modules/@atlaskit/theme/dist/esm/utils/createTheme.js"],"names":["_objectWithoutProperties","React","createContext","useContext","useCallback","createTheme","defaultGetTokens","emptyThemeFn","getTokens","props","ThemeContext","useTheme","themeProps","theme","themeFn","tokens","Consumer","children","createElement","Fragment","Provider","valueFn","value","mixedFn"],"mappings":"AAAA,OAAOA,wBAAP,MAAqC,gDAArC;AACA,OAAOC,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,WAA3C,QAA8D,OAA9D;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,CAAqBC,gBAArB,EAAuC;AAC5C,MAAIC,YAAY,GAAG,SAASA,YAAT,CAAsBC,SAAtB,EAAiCC,KAAjC,EAAwC;AACzD,WAAOD,SAAS,CAACC,KAAD,CAAhB;AACD,GAFD;AAGA;AACF;AACA;AACA;AACA;AACA;AACA;;;AAGE,MAAIC,YAAY,GAAG,aAAaR,aAAa,CAACI,gBAAD,CAA7C;;AAEA,WAASK,QAAT,CAAkBC,UAAlB,EAA8B;AAC5B,QAAIC,KAAK,GAAGV,UAAU,CAACO,YAAD,CAAtB;AACA,QAAII,OAAO,GAAGD,KAAK,IAAIN,YAAvB;AACA,QAAIQ,MAAM,GAAGD,OAAO,CAACF,UAAD,CAApB;AACA,WAAOG,MAAP;AACD,GApB2C,CAoB1C;AACF;;;AAGA,WAASC,QAAT,CAAkBP,KAAlB,EAAyB;AACvB,QAAIQ,QAAQ,GAAGR,KAAK,CAACQ,QAArB;AAAA,QACIL,UAAU,GAAGZ,wBAAwB,CAACS,KAAD,EAAQ,CAAC,UAAD,CAAR,CADzC,CADuB,CAEyC;AAChE;;;AAGA,QAAIM,MAAM,GAAGJ,QAAQ,CAACC,UAAD,CAArB,CANuB,CAMY;AACnC;;AAEA,WAAO,aAAaX,KAAK,CAACiB,aAAN,CAAoBjB,KAAK,CAACkB,QAA1B,EAAoC,IAApC,EAA0CF,QAAQ,CAACF,MAAD,CAAlD,CAApB;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;;;AAGE,WAASK,QAAT,CAAkBX,KAAlB,EAAyB;AACvB,QAAIK,OAAO,GAAGX,UAAU,CAACO,YAAD,CAAxB;AACA,QAAIW,OAAO,GAAGZ,KAAK,CAACa,KAAN,IAAef,YAA7B;AACA,QAAIgB,OAAO,GAAGnB,WAAW,CAAC,UAAUQ,UAAV,EAAsB;AAC9C,aAAOS,OAAO,CAACP,OAAD,EAAUF,UAAV,CAAd;AACD,KAFwB,EAEtB,CAACE,OAAD,EAAUO,OAAV,CAFsB,CAAzB;AAGA,WAAO,aAAapB,KAAK,CAACiB,aAAN,CAAoBR,YAAY,CAACU,QAAjC,EAA2C;AAC7DE,MAAAA,KAAK,EAAEC;AADsD,KAA3C,EAEjBd,KAAK,CAACQ,QAFW,CAApB;AAGD;;AAED,SAAO;AACLD,IAAAA,QAAQ,EAAEA,QADL;AAELI,IAAAA,QAAQ,EAAEA,QAFL;AAGLT,IAAAA,QAAQ,EAAEA;AAHL,GAAP;AAKD","sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React, { createContext, useContext, useCallback } from 'react';\n\n/**\n * createTheme is used to create a set of Providers and Consumers for theming components.\n * - Takes a default theme function; this theme function gets a set of props, and returns tokens\n *  based on those props. An example of this default theme function is one that produces the standard\n *  appearance of the component\n * - Returns three things - a Provider that allow for additional themes to be applied, a Consumer\n *  that can get the current theme and fetch it, and a custom hook - useTheme which provides an alternate (although functionally the same) API\n *  to the Consumer.\n **/\nexport function createTheme(defaultGetTokens) {\n  var emptyThemeFn = function emptyThemeFn(getTokens, props) {\n    return getTokens(props);\n  };\n  /**\n   * Internally, Theme uses React Context, with internal providers and consumers.\n   * The React Context passes only a function that gets props, and turns them into tokens. This\n   * function gets mixed as more Providers with their own themes are added. This mixed function\n   * is ultimately picked up by Consumers, which implement a context consumer internally to fetch\n   * the theme.\n   **/\n\n\n  var ThemeContext = /*#__PURE__*/createContext(defaultGetTokens);\n\n  function useTheme(themeProps) {\n    var theme = useContext(ThemeContext);\n    var themeFn = theme || emptyThemeFn;\n    var tokens = themeFn(themeProps);\n    return tokens;\n  } // The Theme Consumer takes a function as its child - this function takes tokens, and the\n  // return value is generally a set of nodes with the tokens applied appropriately.\n\n\n  function Consumer(props) {\n    var children = props.children,\n        themeProps = _objectWithoutProperties(props, [\"children\"]); // @ts-ignore See issue for more info: https://github.com/Microsoft/TypeScript/issues/10727\n    // Argument of type 'Pick<ThemeProps & { children: (tokens: ThemeTokens) => ReactNode; }, Exclude<keyof ThemeProps, \"children\">>' is not assignable to parameter of type 'ThemeProps'.ts(2345)\n\n\n    var tokens = useTheme(themeProps); // We add a fragment to ensure we don't break people upgrading.\n    // Previously they may have been able to pass in undefined without things blowing up.\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, children(tokens));\n  }\n  /**\n   * The Theme Provider takes regular nodes as its children, but also takes a *theme function*\n   * - The theme function takes a set of props, as well as a function (getTokens) that can turn props into tokens.\n   * - The getTokens function isn't called immediately - instead the props are passed\n   *    through a mix of parent theming functions\n   * Children of this provider will receive this mixed theme\n   */\n\n\n  function Provider(props) {\n    var themeFn = useContext(ThemeContext);\n    var valueFn = props.value || emptyThemeFn;\n    var mixedFn = useCallback(function (themeProps) {\n      return valueFn(themeFn, themeProps);\n    }, [themeFn, valueFn]);\n    return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n      value: mixedFn\n    }, props.children);\n  }\n\n  return {\n    Consumer: Consumer,\n    Provider: Provider,\n    useTheme: useTheme\n  };\n}"]},"metadata":{},"sourceType":"module"}