{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n/** @jsx jsx */\n// eslint-disable-next-line @repo/internal/fs/filename-pattern-match\n\nimport { useEffect, useMemo, useState } from 'react';\nimport { jsx } from '@emotion/core';\nimport PersonIcon from '@atlaskit/icon/glyph/person';\nimport ShipIcon from '@atlaskit/icon/glyph/ship';\nimport { background, N90 } from '@atlaskit/theme/colors';\nimport { AVATAR_RADIUS, AVATAR_SIZES } from './constants';\nexport var ICON_BACKGROUND = background();\nexport var ICON_COLOR = N90;\n/**\n * __Avatar image__\n *\n * An avatar image is an internal component used to control the rendering phases of an image.\n */\n\nvar AvatarImage = function AvatarImage(_ref) {\n  var _ref$alt = _ref.alt,\n      alt = _ref$alt === void 0 ? '' : _ref$alt,\n      src = _ref.src,\n      appearance = _ref.appearance,\n      size = _ref.size,\n      testId = _ref.testId;\n\n  var _useState = useState('initial'),\n      _useState2 = _slicedToArray(_useState, 2),\n      phase = _useState2[0],\n      setPhase = _useState2[1];\n\n  var borderRadius = appearance === 'circle' ? '50%' : \"\".concat(AVATAR_RADIUS[size], \"px\");\n  var image = useMemo(function () {\n    if (src) {\n      setPhase('loading');\n      var img = new Image();\n\n      img.onload = function () {\n        return setPhase('loaded');\n      };\n\n      img.onerror = function () {\n        return setPhase('error');\n      };\n\n      img.src = src;\n      return img;\n    }\n\n    return null;\n  }, [src]);\n  useEffect(function () {\n    return function () {\n      if (image) {\n        image.onload = function () {};\n\n        image.onerror = function () {};\n      }\n    };\n  }, [image]);\n  var imageHasLoadedAsync = src && phase !== 'loading' && phase !== 'error';\n  var imageHasLoadedSync = src && phase === 'loading' && (image === null || image === void 0 ? void 0 : image.complete);\n  var imageHasLoaded = imageHasLoadedAsync || imageHasLoadedSync;\n\n  if (!imageHasLoaded) {\n    return jsx(\"span\", {\n      css: {\n        backgroundColor: ICON_COLOR,\n        width: '100%',\n        height: '100%',\n        display: 'block',\n        '& svg': {\n          height: \"\".concat(AVATAR_SIZES[size], \"px\"),\n          width: \"\".concat(AVATAR_SIZES[size], \"px\")\n        }\n      }\n    }, appearance === 'circle' ? jsx(PersonIcon, {\n      label: alt,\n      primaryColor: background(),\n      secondaryColor: ICON_COLOR,\n      testId: testId && \"\".concat(testId, \"--person\")\n    }) : jsx(ShipIcon, {\n      label: alt,\n      primaryColor: background(),\n      secondaryColor: ICON_COLOR,\n      testId: testId && \"\".concat(testId, \"--ship\")\n    }));\n  }\n\n  return jsx(\"span\", {\n    css: {\n      backgroundColor: 'transparent',\n      backgroundImage: \"url(\".concat(src, \")\"),\n      backgroundPosition: 'center',\n      backgroundRepeat: 'no-repeat',\n      backgroundSize: 'cover',\n      borderRadius: borderRadius,\n      display: 'flex',\n      flex: '1 1 100%',\n      height: '100%',\n      width: '100%'\n    },\n    role: \"img\",\n    \"aria-label\": alt,\n    \"data-testid\": testId && \"\".concat(testId, \"--image\")\n  });\n};\n\nexport default AvatarImage;","map":{"version":3,"sources":["/home/sandy/Documents/evatix/create-components/node_modules/@atlaskit/avatar/dist/esm/AvatarImage.js"],"names":["_slicedToArray","useEffect","useMemo","useState","jsx","PersonIcon","ShipIcon","background","N90","AVATAR_RADIUS","AVATAR_SIZES","ICON_BACKGROUND","ICON_COLOR","AvatarImage","_ref","_ref$alt","alt","src","appearance","size","testId","_useState","_useState2","phase","setPhase","borderRadius","concat","image","img","Image","onload","onerror","imageHasLoadedAsync","imageHasLoadedSync","complete","imageHasLoaded","css","backgroundColor","width","height","display","label","primaryColor","secondaryColor","backgroundImage","backgroundPosition","backgroundRepeat","backgroundSize","flex","role"],"mappings":"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","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\n/** @jsx jsx */\n// eslint-disable-next-line @repo/internal/fs/filename-pattern-match\nimport { useEffect, useMemo, useState } from 'react';\nimport { jsx } from '@emotion/core';\nimport PersonIcon from '@atlaskit/icon/glyph/person';\nimport ShipIcon from '@atlaskit/icon/glyph/ship';\nimport { background, N90 } from '@atlaskit/theme/colors';\nimport { AVATAR_RADIUS, AVATAR_SIZES } from './constants';\nexport var ICON_BACKGROUND = background();\nexport var ICON_COLOR = N90;\n/**\n * __Avatar image__\n *\n * An avatar image is an internal component used to control the rendering phases of an image.\n */\n\nvar AvatarImage = function AvatarImage(_ref) {\n  var _ref$alt = _ref.alt,\n      alt = _ref$alt === void 0 ? '' : _ref$alt,\n      src = _ref.src,\n      appearance = _ref.appearance,\n      size = _ref.size,\n      testId = _ref.testId;\n\n  var _useState = useState('initial'),\n      _useState2 = _slicedToArray(_useState, 2),\n      phase = _useState2[0],\n      setPhase = _useState2[1];\n\n  var borderRadius = appearance === 'circle' ? '50%' : \"\".concat(AVATAR_RADIUS[size], \"px\");\n  var image = useMemo(function () {\n    if (src) {\n      setPhase('loading');\n      var img = new Image();\n\n      img.onload = function () {\n        return setPhase('loaded');\n      };\n\n      img.onerror = function () {\n        return setPhase('error');\n      };\n\n      img.src = src;\n      return img;\n    }\n\n    return null;\n  }, [src]);\n  useEffect(function () {\n    return function () {\n      if (image) {\n        image.onload = function () {};\n\n        image.onerror = function () {};\n      }\n    };\n  }, [image]);\n  var imageHasLoadedAsync = src && phase !== 'loading' && phase !== 'error';\n  var imageHasLoadedSync = src && phase === 'loading' && (image === null || image === void 0 ? void 0 : image.complete);\n  var imageHasLoaded = imageHasLoadedAsync || imageHasLoadedSync;\n\n  if (!imageHasLoaded) {\n    return jsx(\"span\", {\n      css: {\n        backgroundColor: ICON_COLOR,\n        width: '100%',\n        height: '100%',\n        display: 'block',\n        '& svg': {\n          height: \"\".concat(AVATAR_SIZES[size], \"px\"),\n          width: \"\".concat(AVATAR_SIZES[size], \"px\")\n        }\n      }\n    }, appearance === 'circle' ? jsx(PersonIcon, {\n      label: alt,\n      primaryColor: background(),\n      secondaryColor: ICON_COLOR,\n      testId: testId && \"\".concat(testId, \"--person\")\n    }) : jsx(ShipIcon, {\n      label: alt,\n      primaryColor: background(),\n      secondaryColor: ICON_COLOR,\n      testId: testId && \"\".concat(testId, \"--ship\")\n    }));\n  }\n\n  return jsx(\"span\", {\n    css: {\n      backgroundColor: 'transparent',\n      backgroundImage: \"url(\".concat(src, \")\"),\n      backgroundPosition: 'center',\n      backgroundRepeat: 'no-repeat',\n      backgroundSize: 'cover',\n      borderRadius: borderRadius,\n      display: 'flex',\n      flex: '1 1 100%',\n      height: '100%',\n      width: '100%'\n    },\n    role: \"img\",\n    \"aria-label\": alt,\n    \"data-testid\": testId && \"\".concat(testId, \"--image\")\n  });\n};\n\nexport default AvatarImage;"]},"metadata":{},"sourceType":"module"}