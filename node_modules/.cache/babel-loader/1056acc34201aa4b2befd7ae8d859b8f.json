{"ast":null,"code":"/** @jsx jsx */\n// eslint-disable-next-line @repo/internal/fs/filename-pattern-match\nimport { jsx } from '@emotion/core';\nimport { AVATAR_RADIUS, AVATAR_SIZES, BORDER_WIDTH } from './constants';\n\nvar getStyles = function getStyles(_ref) {\n  var _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 'medium' : _ref$size,\n      _ref$appearance = _ref.appearance,\n      appearance = _ref$appearance === void 0 ? 'circle' : _ref$appearance,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$weight = _ref.weight,\n      weight = _ref$weight === void 0 ? 'normal' : _ref$weight;\n  return {\n    width: \"\".concat(AVATAR_SIZES[size], \"px\"),\n    height: \"\".concat(AVATAR_SIZES[size], \"px\"),\n    display: 'inline-block',\n    borderRadius: \"\".concat(appearance === 'square' ? \"\".concat(AVATAR_RADIUS[size], \"px\") : '50%'),\n    backgroundColor: color,\n    border: \"\".concat(BORDER_WIDTH, \"px solid transparent\"),\n    opacity: \"\".concat(weight === 'strong' ? 0.3 : 0.15)\n  };\n};\n/**\n * __Skeleton__\n *\n * A skeleton is the loading state for the avatar component.\n *\n * - [Examples](https://atlassian.design/components/avatar/avatar-skeleton/examples)\n * - [Code](https://atlassian.design/components/avatar/avatar-skeleton/code)\n */\n\n\nvar Skeleton = function Skeleton(_ref2) {\n  var size = _ref2.size,\n      appearance = _ref2.appearance,\n      color = _ref2.color,\n      weight = _ref2.weight;\n  return jsx(\"div\", {\n    css: getStyles({\n      size: size,\n      appearance: appearance,\n      color: color,\n      weight: weight\n    })\n  });\n};\n\nexport default Skeleton;","map":{"version":3,"sources":["/home/sandy/Documents/evatix/create-components/node_modules/@atlaskit/avatar/dist/esm/Skeleton.js"],"names":["jsx","AVATAR_RADIUS","AVATAR_SIZES","BORDER_WIDTH","getStyles","_ref","_ref$size","size","_ref$appearance","appearance","_ref$color","color","_ref$weight","weight","width","concat","height","display","borderRadius","backgroundColor","border","opacity","Skeleton","_ref2","css"],"mappings":"AAAA;AACA;AACA,SAASA,GAAT,QAAoB,eAApB;AACA,SAASC,aAAT,EAAwBC,YAAxB,EAAsCC,YAAtC,QAA0D,aAA1D;;AAEA,IAAIC,SAAS,GAAG,SAASA,SAAT,CAAmBC,IAAnB,EAAyB;AACvC,MAAIC,SAAS,GAAGD,IAAI,CAACE,IAArB;AAAA,MACIA,IAAI,GAAGD,SAAS,KAAK,KAAK,CAAnB,GAAuB,QAAvB,GAAkCA,SAD7C;AAAA,MAEIE,eAAe,GAAGH,IAAI,CAACI,UAF3B;AAAA,MAGIA,UAAU,GAAGD,eAAe,KAAK,KAAK,CAAzB,GAA6B,QAA7B,GAAwCA,eAHzD;AAAA,MAIIE,UAAU,GAAGL,IAAI,CAACM,KAJtB;AAAA,MAKIA,KAAK,GAAGD,UAAU,KAAK,KAAK,CAApB,GAAwB,cAAxB,GAAyCA,UALrD;AAAA,MAMIE,WAAW,GAAGP,IAAI,CAACQ,MANvB;AAAA,MAOIA,MAAM,GAAGD,WAAW,KAAK,KAAK,CAArB,GAAyB,QAAzB,GAAoCA,WAPjD;AAQA,SAAO;AACLE,IAAAA,KAAK,EAAE,GAAGC,MAAH,CAAUb,YAAY,CAACK,IAAD,CAAtB,EAA8B,IAA9B,CADF;AAELS,IAAAA,MAAM,EAAE,GAAGD,MAAH,CAAUb,YAAY,CAACK,IAAD,CAAtB,EAA8B,IAA9B,CAFH;AAGLU,IAAAA,OAAO,EAAE,cAHJ;AAILC,IAAAA,YAAY,EAAE,GAAGH,MAAH,CAAUN,UAAU,KAAK,QAAf,GAA0B,GAAGM,MAAH,CAAUd,aAAa,CAACM,IAAD,CAAvB,EAA+B,IAA/B,CAA1B,GAAiE,KAA3E,CAJT;AAKLY,IAAAA,eAAe,EAAER,KALZ;AAMLS,IAAAA,MAAM,EAAE,GAAGL,MAAH,CAAUZ,YAAV,EAAwB,sBAAxB,CANH;AAOLkB,IAAAA,OAAO,EAAE,GAAGN,MAAH,CAAUF,MAAM,KAAK,QAAX,GAAsB,GAAtB,GAA4B,IAAtC;AAPJ,GAAP;AASD,CAlBD;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAIS,QAAQ,GAAG,SAASA,QAAT,CAAkBC,KAAlB,EAAyB;AACtC,MAAIhB,IAAI,GAAGgB,KAAK,CAAChB,IAAjB;AAAA,MACIE,UAAU,GAAGc,KAAK,CAACd,UADvB;AAAA,MAEIE,KAAK,GAAGY,KAAK,CAACZ,KAFlB;AAAA,MAGIE,MAAM,GAAGU,KAAK,CAACV,MAHnB;AAIA,SAAOb,GAAG,CAAC,KAAD,EAAQ;AAChBwB,IAAAA,GAAG,EAAEpB,SAAS,CAAC;AACbG,MAAAA,IAAI,EAAEA,IADO;AAEbE,MAAAA,UAAU,EAAEA,UAFC;AAGbE,MAAAA,KAAK,EAAEA,KAHM;AAIbE,MAAAA,MAAM,EAAEA;AAJK,KAAD;AADE,GAAR,CAAV;AAQD,CAbD;;AAeA,eAAeS,QAAf","sourcesContent":["/** @jsx jsx */\n// eslint-disable-next-line @repo/internal/fs/filename-pattern-match\nimport { jsx } from '@emotion/core';\nimport { AVATAR_RADIUS, AVATAR_SIZES, BORDER_WIDTH } from './constants';\n\nvar getStyles = function getStyles(_ref) {\n  var _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 'medium' : _ref$size,\n      _ref$appearance = _ref.appearance,\n      appearance = _ref$appearance === void 0 ? 'circle' : _ref$appearance,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$weight = _ref.weight,\n      weight = _ref$weight === void 0 ? 'normal' : _ref$weight;\n  return {\n    width: \"\".concat(AVATAR_SIZES[size], \"px\"),\n    height: \"\".concat(AVATAR_SIZES[size], \"px\"),\n    display: 'inline-block',\n    borderRadius: \"\".concat(appearance === 'square' ? \"\".concat(AVATAR_RADIUS[size], \"px\") : '50%'),\n    backgroundColor: color,\n    border: \"\".concat(BORDER_WIDTH, \"px solid transparent\"),\n    opacity: \"\".concat(weight === 'strong' ? 0.3 : 0.15)\n  };\n};\n/**\n * __Skeleton__\n *\n * A skeleton is the loading state for the avatar component.\n *\n * - [Examples](https://atlassian.design/components/avatar/avatar-skeleton/examples)\n * - [Code](https://atlassian.design/components/avatar/avatar-skeleton/code)\n */\n\n\nvar Skeleton = function Skeleton(_ref2) {\n  var size = _ref2.size,\n      appearance = _ref2.appearance,\n      color = _ref2.color,\n      weight = _ref2.weight;\n  return jsx(\"div\", {\n    css: getStyles({\n      size: size,\n      appearance: appearance,\n      color: color,\n      weight: weight\n    })\n  });\n};\n\nexport default Skeleton;"]},"metadata":{},"sourceType":"module"}