{"ast":null,"code":"import { dimensions } from '../constants';\nimport { css } from '@emotion/core';\nexport var commonSVGStyles = {\n  overflow: 'hidden',\n  pointerEvents: 'none',\n\n  /**\n   * Stop-color doesn't properly apply in chrome when the inherited/current color changes.\n   * We have to initially set stop-color to inherit (either via DOM attribute or an initial CSS\n   * rule) and then override it with currentColor for the color changes to be picked up.\n   */\n  stop: {\n    stopColor: 'currentColor'\n  },\n\n  /**\n   * For windows high contrast mode\n   */\n  '@media screen and (-ms-high-contrast: white-on-black)': {\n    filter: ' grayscale(100%)',\n    color: '#fff',\n    // N0\n    fill: '#000' // DN0\n\n  },\n  '@media screen and (-ms-high-contrast: black-on-white)': {\n    filter: 'grayscale(100%)',\n    color: '#000',\n    // DN0\n    fill: '#fff' // N0\n\n  }\n};\nvar small = css(dimensions.small);\nvar medium = css(dimensions.medium);\nvar large = css(dimensions.large);\nvar xlarge = css(dimensions.xlarge); // pre-built css style-size map\n\nexport var sizeStyleMap = {\n  small: small,\n  medium: medium,\n  large: large,\n  xlarge: xlarge\n};\n/**\n * Returns the width of the icon's parent span. This function has\n * special behaviour to deal with icon-file-type specifically.\n *\n * The reality is the SVG still has its own dimensions, so this is\n * a secondary fallback which in 95% of cases is not required.\n * It's only really being kept to maintain backward compatability.\n */\n\nexport var getIconSize = function getIconSize(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      size = _ref.size;\n\n  if (width && height) {\n    return {\n      width: width,\n      height: height\n    };\n  }\n\n  if (size) {\n    return dimensions[size];\n  }\n\n  return undefined;\n};","map":{"version":3,"sources":["/home/sandy/Documents/evatix/create-components/node_modules/@atlaskit/avatar/node_modules/@atlaskit/icon/dist/esm/components/styles.js"],"names":["dimensions","css","commonSVGStyles","overflow","pointerEvents","stop","stopColor","filter","color","fill","small","medium","large","xlarge","sizeStyleMap","getIconSize","_ref","width","height","size","undefined"],"mappings":"AAAA,SAASA,UAAT,QAA2B,cAA3B;AACA,SAASC,GAAT,QAAoB,eAApB;AACA,OAAO,IAAIC,eAAe,GAAG;AAC3BC,EAAAA,QAAQ,EAAE,QADiB;AAE3BC,EAAAA,aAAa,EAAE,MAFY;;AAI3B;AACF;AACA;AACA;AACA;AACEC,EAAAA,IAAI,EAAE;AACJC,IAAAA,SAAS,EAAE;AADP,GATqB;;AAa3B;AACF;AACA;AACE,2DAAyD;AACvDC,IAAAA,MAAM,EAAE,kBAD+C;AAEvDC,IAAAA,KAAK,EAAE,MAFgD;AAGvD;AACAC,IAAAA,IAAI,EAAE,MAJiD,CAI1C;;AAJ0C,GAhB9B;AAuB3B,2DAAyD;AACvDF,IAAAA,MAAM,EAAE,iBAD+C;AAEvDC,IAAAA,KAAK,EAAE,MAFgD;AAGvD;AACAC,IAAAA,IAAI,EAAE,MAJiD,CAI1C;;AAJ0C;AAvB9B,CAAtB;AA+BP,IAAIC,KAAK,GAAGT,GAAG,CAACD,UAAU,CAACU,KAAZ,CAAf;AACA,IAAIC,MAAM,GAAGV,GAAG,CAACD,UAAU,CAACW,MAAZ,CAAhB;AACA,IAAIC,KAAK,GAAGX,GAAG,CAACD,UAAU,CAACY,KAAZ,CAAf;AACA,IAAIC,MAAM,GAAGZ,GAAG,CAACD,UAAU,CAACa,MAAZ,CAAhB,C,CAAqC;;AAErC,OAAO,IAAIC,YAAY,GAAG;AACxBJ,EAAAA,KAAK,EAAEA,KADiB;AAExBC,EAAAA,MAAM,EAAEA,MAFgB;AAGxBC,EAAAA,KAAK,EAAEA,KAHiB;AAIxBC,EAAAA,MAAM,EAAEA;AAJgB,CAAnB;AAMP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIE,WAAW,GAAG,SAASA,WAAT,CAAqBC,IAArB,EAA2B;AAClD,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,MAAM,GAAGF,IAAI,CAACE,MADlB;AAAA,MAEIC,IAAI,GAAGH,IAAI,CAACG,IAFhB;;AAIA,MAAIF,KAAK,IAAIC,MAAb,EAAqB;AACnB,WAAO;AACLD,MAAAA,KAAK,EAAEA,KADF;AAELC,MAAAA,MAAM,EAAEA;AAFH,KAAP;AAID;;AAED,MAAIC,IAAJ,EAAU;AACR,WAAOnB,UAAU,CAACmB,IAAD,CAAjB;AACD;;AAED,SAAOC,SAAP;AACD,CAjBM","sourcesContent":["import { dimensions } from '../constants';\nimport { css } from '@emotion/core';\nexport var commonSVGStyles = {\n  overflow: 'hidden',\n  pointerEvents: 'none',\n\n  /**\n   * Stop-color doesn't properly apply in chrome when the inherited/current color changes.\n   * We have to initially set stop-color to inherit (either via DOM attribute or an initial CSS\n   * rule) and then override it with currentColor for the color changes to be picked up.\n   */\n  stop: {\n    stopColor: 'currentColor'\n  },\n\n  /**\n   * For windows high contrast mode\n   */\n  '@media screen and (-ms-high-contrast: white-on-black)': {\n    filter: ' grayscale(100%)',\n    color: '#fff',\n    // N0\n    fill: '#000' // DN0\n\n  },\n  '@media screen and (-ms-high-contrast: black-on-white)': {\n    filter: 'grayscale(100%)',\n    color: '#000',\n    // DN0\n    fill: '#fff' // N0\n\n  }\n};\nvar small = css(dimensions.small);\nvar medium = css(dimensions.medium);\nvar large = css(dimensions.large);\nvar xlarge = css(dimensions.xlarge); // pre-built css style-size map\n\nexport var sizeStyleMap = {\n  small: small,\n  medium: medium,\n  large: large,\n  xlarge: xlarge\n};\n/**\n * Returns the width of the icon's parent span. This function has\n * special behaviour to deal with icon-file-type specifically.\n *\n * The reality is the SVG still has its own dimensions, so this is\n * a secondary fallback which in 95% of cases is not required.\n * It's only really being kept to maintain backward compatability.\n */\n\nexport var getIconSize = function getIconSize(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      size = _ref.size;\n\n  if (width && height) {\n    return {\n      width: width,\n      height: height\n    };\n  }\n\n  if (size) {\n    return dimensions[size];\n  }\n\n  return undefined;\n};"]},"metadata":{},"sourceType":"module"}